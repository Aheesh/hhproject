{
  "address": "0x447786d977Ea11Ad0600E193b2d07A06EfB53e5F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "ControllerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ControllerFactoryDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balancerVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "normalizedWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "swapEnabledOnStart",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "managementAumFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aumFeeId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ControllerFactory.MinimalPoolParams",
          "name": "minimalParams",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastCreatedPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isControllerFromFactory",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managedPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb11848a0ce80878683bde3e7abfb25ace9c3c2d947cb354302fa9008179f3429",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x447786d977Ea11Ad0600E193b2d07A06EfB53e5F",
    "transactionIndex": 0,
    "gasUsed": "5110660",
    "logsBloom": "0x
    "blockHash": "0x28cf9763fac3535ac4c3c293b5cb95ce71a0abc74011e5aa7418d4d8d636f164",
    "transactionHash": "0xb11848a0ce80878683bde3e7abfb25ace9c3c2d947cb354302fa9008179f3429",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24606276,
        "transactionHash": "0xb11848a0ce80878683bde3e7abfb25ace9c3c2d947cb354302fa9008179f3429",
        "address": "0x447786d977Ea11Ad0600E193b2d07A06EfB53e5F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x28cf9763fac3535ac4c3c293b5cb95ce71a0abc74011e5aa7418d4d8d636f164"
      }
    ],
    "blockNumber": 24606276,
    "cumulativeGasUsed": "5110660",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    "0x9a62C91626d39D0216b3959112f9D4678E20134d"
  ],
  "numDeployments": 1,
  "solcInputHash": "2391e544a997bf5ce3f3524ee69d8f03",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"ControllerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ControllerFactoryDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"normalizedWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapEnabledOnStart\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"managementAumFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aumFeeId\",\"type\":\"uint256\"}],\"internalType\":\"struct ControllerFactory.MinimalPoolParams\",\"name\":\"minimalParams\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCreatedPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isControllerFromFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managedPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Determines controller deployment address, deploys pool (w/ controller address as argument), then controller.\",\"kind\":\"dev\",\"methods\":{\"create((string,string,address[],uint256[],uint256,bool,uint256,uint256))\":{\"details\":\"Create a Managed Pool and a Controller.\"},\"disable()\":{\"details\":\"Allow the owner to disable the factory, preventing future deployments.The onlyOwner access control paradigm is an example. Any access control can be implemented to allow for different needs.\"},\"getLastCreatedPool()\":{\"details\":\"Return the address of the most recently created pool.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ControllerFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disable()\":{\"notice\":\"owner is initially the factory deployer, but this role can be transferred.\"}},\"notice\":\"Factory for a Managed Pool and Pool Controller.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ControllerFactory.sol\":\"ControllerFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/pool-utils/IBasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\n\\ninterface IBasePoolFactory is IAuthentication {\\n    /**\\n     * @dev Returns true if `pool` was created by this factory.\\n     */\\n    function isPoolFromFactory(address pool) external view returns (bool);\\n\\n    /**\\n     * @dev Check whether the derived factory has been disabled.\\n     */\\n    function isDisabled() external view returns (bool);\\n\\n    /**\\n     * @dev Disable the factory, preventing the creation of more pools. Already existing pools are unaffected.\\n     * Once a factory is disabled, it cannot be re-enabled.\\n     */\\n    function disable() external;\\n}\\n\",\"keccak256\":\"0xe9c4bb30f135a71a4cbcecb634ee1ede5ca67b761fc5a70ca9c55d57f46341a4\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePoolFactory.sol\\\";\\n\\ninterface ILastCreatedPoolFactory is IBasePoolFactory {\\n    /**\\n     * @dev Returns the address of the last Pool created by this factory.\\n     *\\n     * This is typically only useful in complex Pool deployment schemes, where multiple subsystems need to know about\\n     * each other. Note that this value will only be updated once construction of the last created Pool finishes.\\n     */\\n    function getLastCreatedPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xef95f56fbaa1308c88aa9a7622674f1c319f9a2bf5f65e8e692b6929aebd1f37\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/pool-utils/IManagedPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../vault/IBasePool.sol\\\";\\n\\ninterface IManagedPool is IBasePool {\\n    event GradualSwapFeeUpdateScheduled(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 startSwapFeePercentage,\\n        uint256 endSwapFeePercentage\\n    );\\n    event GradualWeightUpdateScheduled(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256[] startWeights,\\n        uint256[] endWeights\\n    );\\n    event SwapEnabledSet(bool swapEnabled);\\n    event JoinExitEnabledSet(bool joinExitEnabled);\\n    event MustAllowlistLPsSet(bool mustAllowlistLPs);\\n    event AllowlistAddressAdded(address indexed member);\\n    event AllowlistAddressRemoved(address indexed member);\\n    event ManagementAumFeePercentageChanged(uint256 managementAumFeePercentage);\\n    event ManagementAumFeeCollected(uint256 bptAmount);\\n    event CircuitBreakerSet(\\n        IERC20 indexed token,\\n        uint256 bptPrice,\\n        uint256 lowerBoundPercentage,\\n        uint256 upperBoundPercentage\\n    );\\n    event TokenAdded(IERC20 indexed token, uint256 normalizedWeight);\\n    event TokenRemoved(IERC20 indexed token);\\n\\n    /**\\n     * @notice Returns the effective BPT supply.\\n     *\\n     * @dev The Pool owes debt to the Protocol and the Pool's owner in the form of unminted BPT, which will be minted\\n     * immediately before the next join or exit. We need to take these into account since, even if they don't yet exist,\\n     * they will effectively be included in any Pool operation that involves BPT.\\n     *\\n     * In the vast majority of cases, this function should be used instead of `totalSupply()`.\\n     *\\n     * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation\\n     * via reentrancy. See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * To call this function safely, attempt to trigger the reentrancy guard in the Vault by calling a non-reentrant\\n     * function before calling `getActualSupply`. That will make the transaction revert in an unsafe context.\\n     * (See `whenNotInVaultContext` in `ManagedPoolSettings`).\\n     */\\n    function getActualSupply() external view returns (uint256);\\n\\n    // Swap fee percentage\\n\\n    /**\\n     * @notice Schedule a gradual swap fee update.\\n     * @dev The swap fee will change from the given starting value (which may or may not be the current\\n     * value) to the given ending fee percentage, over startTime to endTime.\\n     *\\n     * Note that calling this with a starting swap fee different from the current value will immediately change the\\n     * current swap fee to `startSwapFeePercentage`, before commencing the gradual change at `startTime`.\\n     * Emits the GradualSwapFeeUpdateScheduled event.\\n     * This is a permissioned function.\\n     *\\n     * @param startTime - The timestamp when the swap fee change will begin.\\n     * @param endTime - The timestamp when the swap fee change will end (must be >= startTime).\\n     * @param startSwapFeePercentage - The starting value for the swap fee change.\\n     * @param endSwapFeePercentage - The ending value for the swap fee change. If the current timestamp >= endTime,\\n     * `getSwapFeePercentage()` will return this value.\\n     */\\n    function updateSwapFeeGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 startSwapFeePercentage,\\n        uint256 endSwapFeePercentage\\n    ) external;\\n\\n    /**\\n     * @notice Returns the current gradual swap fee update parameters.\\n     * @dev The current swap fee can be retrieved via `getSwapFeePercentage()`.\\n     * @return startTime - The timestamp when the swap fee update will begin.\\n     * @return endTime - The timestamp when the swap fee update will end.\\n     * @return startSwapFeePercentage - The starting swap fee percentage (could be different from the current value).\\n     * @return endSwapFeePercentage - The final swap fee percentage, when the current timestamp >= endTime.\\n     */\\n    function getGradualSwapFeeUpdateParams()\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256 startSwapFeePercentage,\\n            uint256 endSwapFeePercentage\\n        );\\n\\n    // Token weights\\n\\n    /**\\n     * @notice Schedule a gradual weight change.\\n     * @dev The weights will change from their current values to the given endWeights, over startTime to endTime.\\n     * This is a permissioned function.\\n     *\\n     * Since, unlike with swap fee updates, we generally do not want to allow instantaneous weight changes,\\n     * the weights always start from their current values. This also guarantees a smooth transition when\\n     * updateWeightsGradually is called during an ongoing weight change.\\n     * @param startTime - The timestamp when the weight change will begin.\\n     * @param endTime - The timestamp when the weight change will end (can be >= startTime).\\n     * @param tokens - The tokens associated with the target weights (must match the current pool tokens).\\n     * @param endWeights - The target weights. If the current timestamp >= endTime, `getNormalizedWeights()`\\n     * will return these values.\\n     */\\n    function updateWeightsGradually(\\n        uint256 startTime,\\n        uint256 endTime,\\n        IERC20[] memory tokens,\\n        uint256[] memory endWeights\\n    ) external;\\n\\n    /**\\n     * @notice Returns all normalized weights, in the same order as the Pool's tokens.\\n     */\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the current gradual weight change update parameters.\\n     * @dev The current weights can be retrieved via `getNormalizedWeights()`.\\n     * @return startTime - The timestamp when the weight update will begin.\\n     * @return endTime - The timestamp when the weight update will end.\\n     * @return startWeights - The starting weights, when the weight change was initiated.\\n     * @return endWeights - The final weights, when the current timestamp >= endTime.\\n     */\\n    function getGradualWeightUpdateParams()\\n        external\\n        view\\n        returns (\\n            uint256 startTime,\\n            uint256 endTime,\\n            uint256[] memory startWeights,\\n            uint256[] memory endWeights\\n        );\\n\\n    // Join and Exit enable/disable\\n\\n    /**\\n     * @notice Enable or disable joins and exits. Note that this does not affect Recovery Mode exits.\\n     * @dev Emits the JoinExitEnabledSet event. This is a permissioned function.\\n     * @param joinExitEnabled - The new value of the join/exit enabled flag.\\n     */\\n    function setJoinExitEnabled(bool joinExitEnabled) external;\\n\\n    /**\\n     * @notice Returns whether joins and exits are enabled.\\n     */\\n    function getJoinExitEnabled() external view returns (bool);\\n\\n    // Swap enable/disable\\n\\n    /**\\n     * @notice Enable or disable trading.\\n     * @dev Emits the SwapEnabledSet event. This is a permissioned function.\\n     * @param swapEnabled - The new value of the swap enabled flag.\\n     */\\n    function setSwapEnabled(bool swapEnabled) external;\\n\\n    /**\\n     * @notice Returns whether swaps are enabled.\\n     */\\n    function getSwapEnabled() external view returns (bool);\\n\\n    // LP Allowlist\\n\\n    /**\\n     * @notice Enable or disable the LP allowlist.\\n     * @dev Note that any addresses added to the allowlist will be retained if the allowlist is toggled off and\\n     * back on again, because this action does not affect the list of LP addresses.\\n     * Emits the MustAllowlistLPsSet event. This is a permissioned function.\\n     * @param mustAllowlistLPs - The new value of the mustAllowlistLPs flag.\\n     */\\n    function setMustAllowlistLPs(bool mustAllowlistLPs) external;\\n\\n    /**\\n     * @notice Adds an address to the LP allowlist.\\n     * @dev Will fail if the address is already allowlisted.\\n     * Emits the AllowlistAddressAdded event. This is a permissioned function.\\n     * @param member - The address to be added to the allowlist.\\n     */\\n    function addAllowedAddress(address member) external;\\n\\n    /**\\n     * @notice Removes an address from the LP allowlist.\\n     * @dev Will fail if the address was not previously allowlisted.\\n     * Emits the AllowlistAddressRemoved event. This is a permissioned function.\\n     * @param member - The address to be removed from the allowlist.\\n     */\\n    function removeAllowedAddress(address member) external;\\n\\n    /**\\n     * @notice Returns whether the allowlist for LPs is enabled.\\n     */\\n    function getMustAllowlistLPs() external view returns (bool);\\n\\n    /**\\n     * @notice Check whether an LP address is on the allowlist.\\n     * @dev This simply checks the list, regardless of whether the allowlist feature is enabled.\\n     * @param member - The address to check against the allowlist.\\n     * @return true if the given address is on the allowlist.\\n     */\\n    function isAddressOnAllowlist(address member) external view returns (bool);\\n\\n    // Management fees\\n\\n    /**\\n     * @notice Collect any accrued AUM fees and send them to the pool manager.\\n     * @dev This can be called by anyone to collect accrued AUM fees - and will be called automatically\\n     * whenever the supply changes (e.g., joins and exits, add and remove token), and before the fee\\n     * percentage is changed by the manager, to prevent fees from being applied retroactively.\\n     *\\n     * Correct behavior depends on the current supply, which is potentially manipulable if the pool\\n     * is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\\n     * and so is safe to call on ManagedPool.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * @return The amount of BPT minted to the manager.\\n     */\\n    function collectAumManagementFees() external returns (uint256);\\n\\n    /**\\n     * @notice Setter for the yearly percentage AUM management fee, which is payable to the pool manager.\\n     * @dev Attempting to collect AUM fees in excess of the maximum permitted percentage will revert.\\n     * To avoid retroactive fee increases, we force collection at the current fee percentage before processing\\n     * the update. Emits the ManagementAumFeePercentageChanged event. This is a permissioned function.\\n     *\\n     * To prevent changing management fees retroactively, this triggers payment of protocol fees before applying\\n     * the change. Correct behavior depends on the current supply, which is potentially manipulable if the pool\\n     * is reentered during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\\n     * and so is safe to call on ManagedPool.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * @param managementAumFeePercentage - The new management AUM fee percentage.\\n     * @return amount - The amount of BPT minted to the manager before the update, if any.\\n     */\\n    function setManagementAumFeePercentage(uint256 managementAumFeePercentage) external returns (uint256);\\n\\n    /**\\n     * @notice Returns the management AUM fee percentage as an 18-decimal fixed point number and the timestamp of the\\n     * last collection of AUM fees.\\n     */\\n    function getManagementAumFeeParams()\\n        external\\n        view\\n        returns (uint256 aumFeePercentage, uint256 lastCollectionTimestamp);\\n\\n    // Circuit Breakers\\n\\n    /**\\n     * @notice Set a circuit breaker for one or more tokens.\\n     * @dev This is a permissioned function. The lower and upper bounds are percentages, corresponding to a\\n     * relative change in the token's spot price: e.g., a lower bound of 0.8 means the breaker should prevent\\n     * trades that result in the value of the token dropping 20% or more relative to the rest of the pool.\\n     */\\n    function setCircuitBreakers(\\n        IERC20[] memory tokens,\\n        uint256[] memory bptPrices,\\n        uint256[] memory lowerBoundPercentages,\\n        uint256[] memory upperBoundPercentages\\n    ) external;\\n\\n    /**\\n     * @notice Return the full circuit breaker state for the given token.\\n     * @dev These are the reference values (BPT price and reference weight) passed in when the breaker was set,\\n     * along with the percentage bounds. It also returns the current BPT price bounds, needed to check whether\\n     * the circuit breaker should trip.\\n     */\\n    function getCircuitBreakerState(IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 bptPrice,\\n            uint256 referenceWeight,\\n            uint256 lowerBound,\\n            uint256 upperBound,\\n            uint256 lowerBptPriceBound,\\n            uint256 upperBptPriceBound\\n        );\\n\\n    // Add/remove tokens\\n\\n    /**\\n     * @notice Adds a token to the Pool's list of tradeable tokens. This is a permissioned function.\\n     *\\n     * @dev By adding a token to the Pool's composition, the weights of all other tokens will be decreased. The new\\n     * token will have no balance - it is up to the owner to provide some immediately after calling this function.\\n     * Note however that regular join functions will not work while the new token has no balance: the only way to\\n     * deposit an initial amount is by using an Asset Manager.\\n     *\\n     * Token addition is forbidden during a weight change, or if one is scheduled to happen in the future.\\n     *\\n     * The caller may additionally pass a non-zero `mintAmount` to have some BPT be minted for them, which might be\\n     * useful in some scenarios to account for the fact that the Pool will have more tokens.\\n     *\\n     * Emits the TokenAdded event. This is a permissioned function.\\n     *\\n     * Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of\\n     * the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\\n     * and so is safe to call on ManagedPool.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * @param tokenToAdd - The ERC20 token to be added to the Pool.\\n     * @param assetManager - The Asset Manager for the token.\\n     * @param tokenToAddNormalizedWeight - The normalized weight of `token` relative to the other tokens in the Pool.\\n     * @param mintAmount - The amount of BPT to be minted as a result of adding `token` to the Pool.\\n     * @param recipient - The address to receive the BPT minted by the Pool.\\n     */\\n    function addToken(\\n        IERC20 tokenToAdd,\\n        address assetManager,\\n        uint256 tokenToAddNormalizedWeight,\\n        uint256 mintAmount,\\n        address recipient\\n    ) external;\\n\\n    /**\\n     * @notice Removes a token from the Pool's list of tradeable tokens.\\n     * @dev Tokens can only be removed if the Pool has more than 2 tokens, as it can never have fewer than 2 (not\\n     * including BPT). Token removal is also forbidden during a weight change, or if one is scheduled to happen in\\n     * the future.\\n     *\\n     * Emits the TokenRemoved event. This is a permissioned function.\\n     * Correct behavior depends on the token balances from the Vault, which may be out of sync with the state of\\n     * the pool during execution of a Vault hook. This is protected where overridden in ManagedPoolSettings,\\n     * and so is safe to call on ManagedPool.\\n     *\\n     * See https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345 for reference.\\n     *\\n     * The caller may additionally pass a non-zero `burnAmount` to burn some of their BPT, which might be useful\\n     * in some scenarios to account for the fact that the Pool now has fewer tokens. This is a permissioned function.\\n     * @param tokenToRemove - The ERC20 token to be removed from the Pool.\\n     * @param burnAmount - The amount of BPT to be burned after removing `token` from the Pool.\\n     * @param sender - The address to burn BPT from.\\n     */\\n    function removeToken(\\n        IERC20 tokenToRemove,\\n        uint256 burnAmount,\\n        address sender\\n    ) external;\\n}\\n\",\"keccak256\":\"0x56d3016ce96ac3d0514f07aee1bcbcdf069513376567deb97449ba4c15b538fd\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\",\"keccak256\":\"0xf8eeb6c6ad4a8a5a0b72eec1fcae67df37b4682be1fa87ab41dc9ce09f02a7f8\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).\\n     */\\n    function getPoolId() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a\\n     * 10% swap fee.\\n     */\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically\\n     * not relevant for outside parties, but which might be useful for some types of Pools.\\n     */\\n    function getScalingFactors() external view returns (uint256[] memory);\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\\n\",\"keccak256\":\"0x4673e08f6b8e76ffa89155d704a0682a6a98e3c60ca5f28e0c4b964f26b65dbe\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xbe4815478a942261e6e2416632342b0e55ff2b0f75c2551ffd79ad9b2326be38\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"CREATE2_INSUFFICIENT_BALANCE\\\");\\n        require(bytecode.length != 0, \\\"CREATE2_BYTECODE_ZERO\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"CREATE2_DEPLOY_FAILED\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint256(_data));\\n    }\\n}\\n\",\"keccak256\":\"0xd2ca43675be6be88e3dbf75c899f8dbc9e020e3a73b5ba26174cea143105e9cc\",\"license\":\"MIT\"},\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the Ownable library from OpenZeppelin Contracts, altered to reduce runtime gas by dropping\\n// support for the GSN.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _require(owner() == msg.sender, Errors.CALLER_IS_NOT_OWNER);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _require(newOwner != address(0), Errors.NEW_OWNER_IS_ZERO);\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6449bae6d44f06fcea030c000121b504f057359be3c75cd443e717bbedd1cf02\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IManagedPool.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/ILastCreatedPoolFactory.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol\\\";\\n\\n/**\\n * @title Controller\\n * @notice This is a Managed Pool Controller that exists to be the owner of Managed Pools.\\n */\\ncontract Controller is Ownable {\\n    IVault private immutable _vault;\\n    bytes32 private immutable _poolId;\\n    bool private _distributeWinningTokens = false;\\n\\n    constructor(IVault vault, bytes32 poolId) {\\n        if (poolId == 0x0) {\\n            poolId = IManagedPool(\\n                ILastCreatedPoolFactory(msg.sender).getLastCreatedPool()\\n            ).getPoolId();\\n        }\\n        // Verify that this is a real Vault and the pool is registered - this call will revert if not.\\n        vault.getPool(poolId);\\n\\n        //Store the vault and poolId\\n        _vault = vault;\\n        _poolId = poolId;\\n    }\\n\\n    function getPoolId() public view returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    //function to get the pool tokens from the vault calling the IVault.getPoolTokens function\\n    function getPoolTokens()\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory, uint256)\\n    {\\n        IERC20[] memory tokenContracts;\\n        uint256[] memory balances;\\n        uint256 totalBalance;\\n\\n        (tokenContracts, balances, totalBalance) = _vault.getPoolTokens(\\n            _poolId\\n        );\\n\\n        address[] memory tokens = new address[](tokenContracts.length);\\n        for (uint i = 0; i < tokenContracts.length; i++) {\\n            tokens[i] = address(tokenContracts[i]);\\n        }\\n\\n        return (tokens, balances, totalBalance);\\n    }\\n\\n    //function to get the pool tokens info on cash , managed balance and assetManager calling the IVault.getPoolTokensInfo function\\n    function getPoolTokenInfo(\\n        IERC20 token\\n    ) public view returns (uint256, uint256, uint256, address) {\\n        (\\n            uint256 cashBalance,\\n            uint256 managedBalance,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        ) = _vault.getPoolTokenInfo(_poolId, token);\\n        return (cashBalance, managedBalance, lastChangeBlock, assetManager);\\n    }\\n\\n    //function to get the pool specialization from the vault calling the IVault.getPoolSpecialization function\\n    function getPoolSpecialization()\\n        public\\n        view\\n        returns (address, IVault.PoolSpecialization)\\n    {\\n        address poolAddress;\\n        IVault.PoolSpecialization poolSpecialization;\\n        (poolAddress, poolSpecialization) = _vault.getPool(_poolId);\\n        return (poolAddress, poolSpecialization);\\n    }\\n\\n    //function to check if joining and exiting pool is enabled\\n    function getJoinExitEnabled() external view returns (bool) {\\n        (address poolAddress, ) = _vault.getPool(_poolId);\\n        return IManagedPool(poolAddress).getJoinExitEnabled();\\n    }\\n\\n    //function to check status of the pool\\n    function getSwapEnabled() external view returns (bool) {\\n        (address poolAddress, ) = _vault.getPool(_poolId);\\n        return IManagedPool(poolAddress).getSwapEnabled();\\n    }\\n\\n    //function to set swap enabled flag\\n    function setSwapEnabled(bool swapEnabled) public {\\n        (address poolAddress, ) = _vault.getPool(_poolId);\\n        return IManagedPool(poolAddress).setSwapEnabled(swapEnabled);\\n    }\\n\\n    //Function to set Managed Pool Join / Exit flag\\n    function setJoinExitEnabled(bool joinExitEnabled) public {\\n        (address poolAddress, ) = _vault.getPool(_poolId);\\n        return IManagedPool(poolAddress).setJoinExitEnabled(joinExitEnabled);\\n    }\\n\\n    // Approve the Vault contract to spend tokens\\n    function approveVault(address token, uint256 amount) public {\\n        IERC20(token).approve(address(_vault), amount);\\n    }\\n\\n    //function to transfer token to controller contract\\n    function transferToken(address token, uint256 amount) public {\\n        // console.log(\\n        //     \\\"Controller - transferToken function call - start \\\",\\n        //     amount\\n        // );\\n        // console.log(\\n        //     \\\"Controller - transferToken function call - start -->Current Allowance \\\",\\n        //     IERC20(token).allowance(msg.sender, address(this))\\n        // );\\n        if (IERC20(token).allowance(msg.sender, address(this)) >= amount) {\\n            IERC20(token).transferFrom(msg.sender, address(this), amount);\\n            // console.log(\\n            //     \\\"Controller - transferToken function call - end\\\",\\n            //     IERC20(token).balanceOf(address(this))\\n            // );\\n        } else {\\n            // console.log(\\\"Get additiona allowance\\\");\\n        }\\n    }\\n\\n    //function to init the managed pool\\n    function initPool(\\n        address[] memory PoolTokens,\\n        uint256[] memory amountsIn\\n    ) external payable {\\n        IAsset[] memory assets = new IAsset[](PoolTokens.length);\\n        for (uint i = 0; i < PoolTokens.length; i++) {\\n            assets[i] = IAsset(address(PoolTokens[i]));\\n        }\\n        // Create a new array with the size of amountsIn plus one (for the initial value)\\n        uint256[] memory weiAmountPerToken = new uint256[](\\n            1 + amountsIn.length\\n        );\\n\\n        // Assign the initial value\\n        weiAmountPerToken[0] = 5192296858534827628530496329000000;\\n\\n        // Copy the values from amountsIn\\n        for (uint i = 0; i < amountsIn.length; i++) {\\n            weiAmountPerToken[i + 1] = amountsIn[i];\\n        }\\n\\n        uint256 JOIN_KIND_INIT = 0;\\n        bytes memory initUserData = abi.encode(JOIN_KIND_INIT, amountsIn);\\n        // console.log(\\n        //     \\\"Controller - initPool() initUserData ===? check next line\\\"\\n        // );\\n        console.logBytes(initUserData);\\n\\n        IVault.JoinPoolRequest memory initJoinPoolRequest = IVault\\n            .JoinPoolRequest({\\n                assets: assets,\\n                maxAmountsIn: weiAmountPerToken,\\n                userData: initUserData,\\n                fromInternalBalance: false\\n            });\\n        // console.log(\\n        //     \\\"Controller - initPool() request msg.sender is \\\",\\n        //     msg.sender\\n        // );\\n        _vault.joinPool(\\n            _poolId,\\n            address(this),\\n            address(this),\\n            initJoinPoolRequest\\n        );\\n        // console.log(\\n        //     \\\"Controller - initPool() request done for controller \\\",\\n        //     address(this)\\n        // );\\n    }\\n\\n    //function to withdraw token cash balance from the pool to asset manager\\n    function withdrawFromPool(IERC20 token, uint256 amount) public onlyOwner {\\n        IVault.PoolBalanceOp[] memory ops = new IVault.PoolBalanceOp[](2);\\n\\n        //Withdraw token, creating a non-zero 'managed' balance in the Pool.\\n        ops[0].kind = IVault.PoolBalanceOpKind.WITHDRAW;\\n        ops[0].poolId = _poolId;\\n        ops[0].amount = amount;\\n        ops[0].token = token;\\n\\n        //Clear the 'managed' balance in the Pool.\\n        ops[1].kind = IVault.PoolBalanceOpKind.UPDATE;\\n        ops[1].poolId = _poolId;\\n        ops[1].amount = 0; // update logic to set balance - amount withdrwan\\n        ops[1].token = token;\\n\\n        _vault.managePoolBalance(ops);\\n        _distributeWinningTokens = true;\\n    }\\n\\n    //function to transfer stable token from controller to winning token holders\\n    function batchTransfer(\\n        address[] memory recipients,\\n        uint256[] memory amounts,\\n        IERC20 token\\n    ) public onlyOwner {\\n        require(_distributeWinningTokens, \\\"stable withdraw not done\\\");\\n        (address poolAddress, ) = _vault.getPool(_poolId);\\n        require(\\n            !IManagedPool(poolAddress).getJoinExitEnabled(),\\n            \\\"Join/Exit is enabled\\\"\\n        );\\n        require(!IManagedPool(poolAddress).getSwapEnabled(), \\\"Swap enabled\\\");\\n        require(recipients.length == amounts.length, \\\"Array length mismatch\\\");\\n        for (uint i = 0; i < recipients.length; i++) {\\n            require(\\n                token.transfer(recipients[i], amounts[i]),\\n                \\\"Transfer failed\\\"\\n            );\\n            console.log(\\\"Transferred \\\", amounts[i], \\\" to \\\", recipients[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x228cce1d2b13a32ab65c6ffd354c9d21c76ede45930a58d8294034d702beb924\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ControllerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IManagedPool.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Create2.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/Ownable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./interfaces/IManagedPoolFactory.sol\\\";\\nimport \\\"./Controller.sol\\\";\\n\\n/**\\n * @title ControllerFactory\\n * @notice Factory for a Managed Pool and Pool Controller.\\n * @dev Determines controller deployment address, deploys pool (w/ controller address as argument), then controller.\\n */\\ncontract ControllerFactory is Ownable {\\n    mapping(address => bool) public isControllerFromFactory;\\n\\n    address public immutable managedPoolFactory;\\n    IVault public immutable balancerVault;\\n    bool public isDisabled;\\n\\n    uint256 private _nextControllerSalt;\\n    address private _lastCreatedPool;\\n\\n    // This struct is a subset of IManagedPoolFactory.NewPoolParams which omits arguments\\n    // that this factory will override and are therefore unnecessary to provide. It will\\n    // ultimately be used to populate IManagedPoolFactory.NewPoolParams.\\n    struct MinimalPoolParams {\\n        string name;\\n        string symbol;\\n        IERC20[] tokens;\\n        uint256[] normalizedWeights;\\n        uint256 swapFeePercentage;\\n        bool swapEnabledOnStart;\\n        uint256 managementAumFeePercentage;\\n        uint256 aumFeeId;\\n    }\\n\\n    event ControllerCreated(address indexed controller, bytes32 poolId);\\n    event ControllerFactoryDisabled();\\n\\n    constructor(IVault vault, address factory) {\\n        balancerVault = vault;\\n        managedPoolFactory = factory;\\n    }\\n\\n    /**\\n     * @dev Return the address of the most recently created pool.\\n     */\\n    function getLastCreatedPool() external view returns (address) {\\n        return _lastCreatedPool;\\n    }\\n\\n    /**\\n     * @dev Create a Managed Pool and a Controller.\\n     */\\n    function create(MinimalPoolParams memory minimalParams) external {\\n        require(!isDisabled, \\\"ControllerFactory: Factory is disabled\\\");\\n\\n        console.log(\\n            \\\"ControllerFactory create() require !isDisabled \\\",\\n            isDisabled\\n        );\\n        console.log(\\n            \\\"ControllerFactory create() 1 :Name,  ManagedPoolFactory\\\",\\n            minimalParams.name,\\n            managedPoolFactory\\n        );\\n        console.log(\\n            \\\"!IManagedPoolFactory\\\",\\n            IManagedPoolFactory(managedPoolFactory).isDisabled()\\n        );\\n        require(\\n            !IManagedPoolFactory(managedPoolFactory).isDisabled(),\\n            \\\"ControllerFactory create(): ManagedPoolFactory is disabled\\\"\\n        );\\n\\n        bytes32 controllerSalt = bytes32(_nextControllerSalt);\\n        _nextControllerSalt++;\\n\\n        bytes memory controllerCreationCode = abi.encodePacked(\\n            type(Controller).creationCode,\\n            // TODO remove zeroed (0x0) poolId from NullController creation. Used just to deploy a fake NullController\\n            abi.encode(balancerVault, 0x0)\\n        );\\n        address expectedControllerAddress = Create2.computeAddress(\\n            controllerSalt,\\n            keccak256(controllerCreationCode)\\n        );\\n\\n        // Build arguments to deploy pool from factory.\\n        address[] memory assetManagers = new address[](\\n            minimalParams.tokens.length\\n        );\\n        for (uint256 i = 0; i < assetManagers.length; i++) {\\n            assetManagers[i] = expectedControllerAddress;\\n        }\\n\\n        // Populate IManagedPoolFactory.ManagedPoolParams with arguments from MinimalPoolParams and\\n        // other arguments that this factory provides itself.\\n        IManagedPoolFactory.ManagedPoolParams memory poolParams;\\n\\n        poolParams.name = minimalParams.name;\\n        poolParams.symbol = minimalParams.symbol;\\n        // Asset Managers set to the controller address, not known by deployer until creation.\\n        poolParams.assetManagers = assetManagers;\\n\\n        // Populate IManagedPoolFactory.ManagedPoolSettingsParams with arguments from MinimalPoolParams and\\n        // other arguments that this factory provides itself.\\n        IManagedPoolFactory.ManagedPoolSettingsParams memory settingsParams;\\n        settingsParams.tokens = minimalParams.tokens;\\n        settingsParams.normalizedWeights = minimalParams.normalizedWeights;\\n        settingsParams.swapFeePercentage = minimalParams.swapFeePercentage;\\n        settingsParams.swapEnabledOnStart = minimalParams.swapEnabledOnStart;\\n        // Factory enforces public LPs for MPools with Controller.\\n        settingsParams.mustAllowListLPs = false;\\n        settingsParams.managementAumFeePercentage = minimalParams\\n            .managementAumFeePercentage;\\n        settingsParams.aumFeeId = minimalParams.aumFeeId;\\n\\n        bytes32 poolSalt = bytes32(_nextControllerSalt);\\n        _nextControllerSalt++;\\n\\n        IManagedPool pool = IManagedPool(\\n            IManagedPoolFactory(managedPoolFactory).create(\\n                poolParams,\\n                settingsParams,\\n                expectedControllerAddress,\\n                poolSalt\\n            )\\n        );\\n        _lastCreatedPool = address(pool);\\n\\n        console.log(\\n            \\\"ControllerFactory create(): Managed Pool created\\\",\\n            _lastCreatedPool\\n        );\\n\\n        address actualControllerAddress = Create2.deploy(\\n            0,\\n            controllerSalt,\\n            controllerCreationCode\\n        );\\n        require(\\n            expectedControllerAddress == actualControllerAddress,\\n            \\\"ControllerFactory: Controller address mismatch\\\"\\n        );\\n\\n        //Log controller creation locally\\n        isControllerFromFactory[actualControllerAddress] = true;\\n        //Log controller creation globally\\n        console.log(\\n            \\\"ControllerFactory create(): Controller created\\\",\\n            actualControllerAddress\\n        );\\n        // set controller owner to deployer\\n        Controller(actualControllerAddress).transferOwnership(msg.sender);\\n\\n        emit ControllerCreated(actualControllerAddress, pool.getPoolId());\\n    }\\n\\n    /**\\n     * @dev Allow the owner to disable the factory, preventing future deployments.\\n     * @notice owner is initially the factory deployer, but this role can be transferred.\\n     * @dev The onlyOwner access control paradigm is an example. Any access control can\\n     * be implemented to allow for different needs.\\n     */\\n    function disable() external onlyOwner {\\n        isDisabled = true;\\n        emit ControllerFactoryDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0x90ca8cf6ee625712a5e4de0efd45ef875ac88b721f752cab8b9c3c288e917387\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IManagedPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IManagedPoolFactory {\\n    struct ManagedPoolParams {\\n        string name;\\n        string symbol;\\n        address[] assetManagers;\\n    }\\n\\n    struct ManagedPoolSettingsParams {\\n        IERC20[] tokens;\\n        uint256[] normalizedWeights;\\n        uint256 swapFeePercentage;\\n        bool swapEnabledOnStart;\\n        bool mustAllowListLPs;\\n        uint256 managementAumFeePercentage;\\n        uint256 aumFeeId;\\n    }\\n\\n    /**\\n     * @dev Deploys a new `ManagedPool`. The owner should be a contract, deployed by another factory.\\n     */\\n    function create(\\n        ManagedPoolParams memory poolParams,\\n        ManagedPoolSettingsParams memory settingsParams,\\n        address owner,\\n        bytes32 salt\\n    ) external returns (address pool);\\n\\n    /**\\n     * @dev Return the address of the most recently created pool.\\n     */\\n    function getLastCreatedPool() external view returns (address);\\n\\n    /**\\n     * @dev Check whether the derived factory has been disabled.\\n     */\\n    function isDisabled() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7c47e02350168aa06170036cb7da23669e47fe822970496029f435a8009e6021\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005e0638038062005e068339818101604052810190620000379190620001b0565b6200004833620000be60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200026d565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001938162000239565b92915050565b600081519050620001aa8162000253565b92915050565b60008060408385031215620001c457600080fd5b6000620001d48582860162000199565b9250506020620001e78582860162000182565b9150509250929050565b6000620001fe8262000219565b9050919050565b60006200021282620001f1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200024481620001f1565b81146200025057600080fd5b50565b6200025e8162000205565b81146200026a57600080fd5b50565b60805160601c60a05160601c615b56620002b0600039806104c75280610a6752508061029552806102f6528061039e52806106bb5280610bd25250615b566000f3fe60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c80636c57f5a9116200006f5780636c57f5a91462000157578063715018a614620001795780638da5cb5b1462000185578063d4f25a4b14620001a7578063f2fde38b14620001c957620000ac565b806303818c1114620000b15780630b688a4914620000d1578063158274a514620001075780632f2770db14620001295780635ed312821462000135575b600080fd5b620000cf6004803603810190620000c991906200160f565b620001e9565b005b620000ef6004803603810190620000e991906200155f565b62000a45565b604051620000fe919062001d5f565b60405180910390f35b6200011162000a65565b60405162000120919062001d99565b60405180910390f35b6200013362000a89565b005b6200013f62000b17565b6040516200014e919062001d25565b60405180910390f35b6200016162000b41565b60405162000170919062001d5f565b60405180910390f35b6200018362000b54565b005b6200018f62000ba7565b6040516200019e919062001d25565b60405180910390f35b620001b162000bd0565b604051620001c0919062001d25565b60405180910390f35b620001e76004803603810190620001e191906200155f565b62000bf4565b005b600260009054906101000a900460ff16156200023c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002339062001f1e565b60405180910390fd5b620002706040518060600160405280602f815260200162005af2602f9139600260009054906101000a900460ff1662000c85565b620002ba60405180606001604052806037815260200162005a5d6037913982600001517f000000000000000000000000000000000000000000000000000000000000000062000d25565b6200039c6040518060400160405280601481526020017f21494d616e61676564506f6f6c466163746f72790000000000000000000000008152507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636c57f5a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200035b57600080fd5b505afa15801562000370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003969190620015b7565b62000c85565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636c57f5a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040357600080fd5b505afa15801562000418573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043e9190620015b7565b1562000481576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004789062001efc565b60405180910390fd5b600060035460001b9050600360008154809291906001019190505550606060405180602001620004b19062001199565b6020820181038252601f19601f820116604052507f00000000000000000000000000000000000000000000000000000000000000006000604051602001620004fb92919062001db6565b6040516020818303038152906040526040516020016200051d92919062001cfd565b604051602081830303815290604052905060006200054383838051906020012062000dc8565b9050606084604001515167ffffffffffffffff811180156200056457600080fd5b50604051908082528060200260200182016040528015620005945781602001602082028036833780820191505090505b50905060005b8151811015620005fa5782828281518110620005b257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506200059a565b5062000605620011a7565b856000015181600001819052508560200151816020018190525081816040018190525062000632620011c8565b866040015181600001819052508660600151816020018190525086608001518160400181815250508660a0015181606001901515908115158152505060008160800190151590811515815250508660c001518160a00181815250508660e001518160c0018181525050600060035460001b905060036000815480929190600101919050555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637304b8b9858589866040518563ffffffff1660e01b81526004016200071a949392919062001f62565b602060405180830381600087803b1580156200073557600080fd5b505af11580156200074a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200077091906200158b565b905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620007fa60405180606001604052806030815260200162005ac260309139600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000ddf565b60006200080a60008a8a62000e7f565b90508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146200087d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008749062001eda565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620008f96040518060600160405280602e815260200162005a94602e91398262000ddf565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000934919062001d42565b600060405180830381600087803b1580156200094f57600080fd5b505af115801562000964573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167fe28c6fbc4eea571ad9b63caadffab5ed31c5fe070869482612284e482b1c94ba8373ffffffffffffffffffffffffffffffffffffffff166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015620009e757600080fd5b505afa158015620009fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a229190620015e3565b60405162000a31919062001d7c565b60405180910390a250505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b62000ace3373ffffffffffffffffffffffffffffffffffffffff1662000aae62000ba7565b73ffffffffffffffffffffffffffffffffffffffff16146101aa62000f99565b6001600260006101000a81548160ff0219169083151502179055507ff5d010c63fd4b7b423d9e3300f87bcd6131e94d44e9a585a74770b23213a8e0160405160405180910390a1565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b62000b993373ffffffffffffffffffffffffffffffffffffffff1662000b7962000ba7565b73ffffffffffffffffffffffffffffffffffffffff16146101aa62000f99565b62000ba5600062000faf565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b62000c393373ffffffffffffffffffffffffffffffffffffffff1662000c1962000ba7565b73ffffffffffffffffffffffffffffffffffffffff16146101aa62000f99565b62000c77600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101ab62000f99565b62000c828162000faf565b50565b62000d21828260405160240162000c9e92919062001e17565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001073565b5050565b62000dc383838360405160240162000d409392919062001e4b565b6040516020818303038152906040527f95ed0195000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001073565b505050565b600062000dd783833062001091565b905092915050565b62000e7b828260405160240162000df892919062001de3565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001073565b5050565b6000808447101562000ec8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ebf9062001e96565b60405180910390fd5b60008351141562000f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f079062001f40565b60405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000f8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f859062001eb8565b60405180910390fd5b809150509392505050565b8162000fab5762000faa81620010d7565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200108e8162001086620010ec6200110d565b63ffffffff16565b50565b60008060ff60f81b838686604051602001620010b1949392919062001ca7565b6040516020818303038152906040528051906020012090508060001c9150509392505050565b620010e9816242414c60e81b62001119565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b62001209819050919050565b60008160e81c62ffffff1690506030600a840601600a840493506030600a850601600a850494506030600a8606018360081b60230160181b8160101b8360081b850101810160c81b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024528060445260646000fd5b6136b380620023aa83390190565b60405180606001604052806060815260200160608152602001606081525090565b6040518060e0016040528060608152602001606081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565bfe5b6000813590506200121c8162002327565b92915050565b600081519050620012338162002327565b92915050565b600082601f8301126200124b57600080fd5b8135620012626200125c8262001feb565b62001fbd565b915081818352602084019350602081019050838560208402820111156200128857600080fd5b60005b83811015620012bc5781620012a1888262001398565b8452602084019350602083019250506001810190506200128b565b5050505092915050565b600082601f830112620012d857600080fd5b8135620012ef620012e98262002014565b62001fbd565b915081818352602084019350602081019050838560208402820111156200131557600080fd5b60005b838110156200134957816200132e888262001548565b84526020840193506020830192505060018101905062001318565b5050505092915050565b600081359050620013648162002341565b92915050565b6000815190506200137b8162002341565b92915050565b60008151905062001392816200235b565b92915050565b600081359050620013a98162002375565b92915050565b600082601f830112620013c157600080fd5b8135620013d8620013d2826200203d565b62001fbd565b91508082526020830160208301858383011115620013f557600080fd5b6200140283828462002288565b50505092915050565b600061010082840312156200141f57600080fd5b6200142c61010062001fbd565b9050600082013567ffffffffffffffff8111156200144957600080fd5b6200145784828501620013af565b600083015250602082013567ffffffffffffffff8111156200147857600080fd5b6200148684828501620013af565b602083015250604082013567ffffffffffffffff811115620014a757600080fd5b620014b58482850162001239565b604083015250606082013567ffffffffffffffff811115620014d657600080fd5b620014e484828501620012c6565b6060830152506080620014fa8482850162001548565b60808301525060a0620015108482850162001353565b60a08301525060c0620015268482850162001548565b60c08301525060e06200153c8482850162001548565b60e08301525092915050565b60008135905062001559816200238f565b92915050565b6000602082840312156200157257600080fd5b600062001582848285016200120b565b91505092915050565b6000602082840312156200159e57600080fd5b6000620015ae8482850162001222565b91505092915050565b600060208284031215620015ca57600080fd5b6000620015da848285016200136a565b91505092915050565b600060208284031215620015f657600080fd5b6000620016068482850162001381565b91505092915050565b6000602082840312156200162257600080fd5b600082013567ffffffffffffffff8111156200163d57600080fd5b6200164b848285016200140b565b91505092915050565b6000620016628383620016b3565b60208301905092915050565b60006200167c8383620018ce565b60208301905092915050565b600062001696838362001c96565b60208301905092915050565b620016ad81620021e8565b82525050565b620016be8162002147565b82525050565b620016cf8162002147565b82525050565b620016ea620016e48262002147565b620022cd565b82525050565b6000620016fd826200209a565b620017098185620020f8565b935062001716836200206a565b8060005b838110156200174d57815162001731888262001654565b97506200173e83620020d1565b9250506001810190506200171a565b5085935050505092915050565b60006200176782620020a5565b620017738185620020f8565b935062001780836200207a565b8060005b83811015620017b75781516200179b88826200166e565b9750620017a883620020de565b92505060018101905062001784565b5085935050505092915050565b6000620017d182620020b0565b620017dd818562002109565b9350620017ea836200208a565b8060005b838110156200182157815162001805888262001688565b97506200181283620020eb565b925050600181019050620017ee565b5085935050505092915050565b62001839816200215b565b82525050565b6200184a816200215b565b82525050565b620018656200185f8262002167565b620022e1565b82525050565b620018768162002193565b82525050565b620018916200188b8262002193565b620022eb565b82525050565b6000620018a482620020bb565b620018b081856200211a565b9350620018c281856020860162002297565b80840191505092915050565b620018d981620021fc565b82525050565b620018ea8162002224565b82525050565b620018fb816200224c565b82525050565b60006200190e82620020c6565b6200191a818562002125565b93506200192c81856020860162002297565b620019378162002309565b840191505092915050565b60006200194f82620020c6565b6200195b818562002136565b93506200196d81856020860162002297565b620019788162002309565b840191505092915050565b600062001992601c8362002136565b91507f435245415445325f494e53554646494349454e545f42414c414e4345000000006000830152602082019050919050565b6000620019d460158362002136565b91507f435245415445325f4445504c4f595f4641494c454400000000000000000000006000830152602082019050919050565b600062001a16602e8362002136565b91507f436f6e74726f6c6c6572466163746f72793a20436f6e74726f6c6c657220616460008301527f6472657373206d69736d617463680000000000000000000000000000000000006020830152604082019050919050565b600062001a7e603a8362002136565b91507f436f6e74726f6c6c6572466163746f72792063726561746528293a204d616e6160008301527f676564506f6f6c466163746f72792069732064697361626c65640000000000006020830152604082019050919050565b600062001ae660268362002136565b91507f436f6e74726f6c6c6572466163746f72793a20466163746f727920697320646960008301527f7361626c656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062001b4e60158362002136565b91507f435245415445325f42595445434f44455f5a45524f00000000000000000000006000830152602082019050919050565b6000606083016000830151848203600086015262001ba0828262001901565b9150506020830151848203602086015262001bbc828262001901565b9150506040830151848203604086015262001bd88282620016f0565b9150508091505092915050565b600060e083016000830151848203600086015262001c0482826200175a565b9150506020830151848203602086015262001c208282620017c4565b915050604083015162001c37604086018262001c96565b50606083015162001c4c60608601826200182e565b50608083015162001c6160808601826200182e565b5060a083015162001c7660a086018262001c96565b5060c083015162001c8b60c086018262001c96565b508091505092915050565b62001ca181620021d1565b82525050565b600062001cb5828762001850565b60018201915062001cc78286620016d5565b60148201915062001cd982856200187c565b60208201915062001ceb82846200187c565b60208201915081905095945050505050565b600062001d0b828562001897565b915062001d19828462001897565b91508190509392505050565b600060208201905062001d3c6000830184620016c4565b92915050565b600060208201905062001d596000830184620016a2565b92915050565b600060208201905062001d7660008301846200183f565b92915050565b600060208201905062001d9360008301846200186b565b92915050565b600060208201905062001db06000830184620018df565b92915050565b600060408201905062001dcd6000830185620018df565b62001ddc6020830184620018f0565b9392505050565b6000604082019050818103600083015262001dff818562001942565b905062001e106020830184620016c4565b9392505050565b6000604082019050818103600083015262001e33818562001942565b905062001e4460208301846200183f565b9392505050565b6000606082019050818103600083015262001e67818662001942565b9050818103602083015262001e7d818562001942565b905062001e8e6040830184620016c4565b949350505050565b6000602082019050818103600083015262001eb18162001983565b9050919050565b6000602082019050818103600083015262001ed381620019c5565b9050919050565b6000602082019050818103600083015262001ef58162001a07565b9050919050565b6000602082019050818103600083015262001f178162001a6f565b9050919050565b6000602082019050818103600083015262001f398162001ad7565b9050919050565b6000602082019050818103600083015262001f5b8162001b3f565b9050919050565b6000608082019050818103600083015262001f7e818762001b81565b9050818103602083015262001f94818662001be5565b905062001fa56040830185620016c4565b62001fb460608301846200186b565b95945050505050565b6000604051905081810181811067ffffffffffffffff8211171562001fe157600080fd5b8060405250919050565b600067ffffffffffffffff8211156200200357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200202c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200205557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200215482620021b1565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6000620021aa8262002147565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000620021f58262002260565b9050919050565b6000620022098262002210565b9050919050565b60006200221d82620021b1565b9050919050565b6000620022318262002238565b9050919050565b60006200224582620021b1565b9050919050565b60006200225982620021db565b9050919050565b60006200226d8262002274565b9050919050565b60006200228182620021b1565b9050919050565b82818337600083830152505050565b60005b83811015620022b75780820151818401526020810190506200229a565b83811115620022c7576000848401525b50505050565b6000620022da82620022f5565b9050919050565b6000819050919050565b6000819050919050565b600062002302826200231a565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b620023328162002147565b81146200233e57600080fd5b50565b6200234c816200215b565b81146200235857600080fd5b50565b620023668162002193565b81146200237257600080fd5b50565b62002380816200219d565b81146200238c57600080fd5b50565b6200239a81620021d1565b8114620023a657600080fd5b5056fe60c060405260008060146101000a81548160ff0219169083151502179055503480156200002b57600080fd5b50604051620036b3380380620036b3833981810160405281019062000051919062000404565b62000062336200024b60201b60201c565b6000801b81141562000174573373ffffffffffffffffffffffffffffffffffffffff16635ed312826040518163ffffffff1660e01b815260040160206040518083038186803b158015620000b557600080fd5b505afa158015620000ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f091906200036b565b73ffffffffffffffffffffffffffffffffffffffff166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013657600080fd5b505afa1580156200014b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001719190620003d8565b90505b8173ffffffffffffffffffffffffffffffffffffffff1663f6c00927826040518263ffffffff1660e01b8152600401620001af919062000456565b604080518083038186803b158015620001c757600080fd5b505afa158015620001dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000202919062000397565b50508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060a08181525050505062000524565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200032081620004c5565b92915050565b6000815190506200033781620004df565b92915050565b6000815190506200034e81620004f9565b92915050565b600081519050620003658162000513565b92915050565b6000602082840312156200037e57600080fd5b60006200038e848285016200030f565b91505092915050565b60008060408385031215620003ab57600080fd5b6000620003bb858286016200030f565b9250506020620003ce8582860162000354565b9150509250929050565b600060208284031215620003eb57600080fd5b6000620003fb8482850162000326565b91505092915050565b600080604083850312156200041857600080fd5b600062000428858286016200033d565b92505060206200043b8582860162000326565b9150509250929050565b620004508162000487565b82525050565b60006020820190506200046d600083018462000445565b92915050565b60006200048082620004a5565b9050919050565b6000819050919050565b60006200049e8262000473565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004d08162000473565b8114620004dc57600080fd5b50565b620004ea8162000487565b8114620004f657600080fd5b50565b620005048162000491565b81146200051057600080fd5b50565b600381106200052157600080fd5b50565b60805160601c60a0516130fa620005b9600039806104f4528061055952806106ab528061080652806109475280610c885280611154528061123352806113c952806116845280611740528061187c52508061051d528061066f52806107ca528061090b5280610ab95280610b245280610c4c52806112dc528061138d52806116485280611704528061184052506130fa6000f3fe6080604052600436106100fe5760003560e01c80638da5cb5b11610095578063c399a9a411610064578063c399a9a414610302578063d95219f31461032e578063de3d2b2d1461034a578063e01af92c14610373578063f2fde38b1461039c576100fe565b80638da5cb5b1461025c578063b6d2473714610287578063bb0a64b6146102b0578063c1bf9e58146102d9576100fe565b806367e0e076116100d157806367e0e076146101ad578063715018a6146101ed57806389c06568146102045780638d928af814610231576100fe565b80631072cbea1461010357806338fff2d01461012c57806341e45a201461015757806347bc4d9214610182575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190612092565b6103c5565b005b34801561013857600080fd5b506101416104f0565b60405161014e9190612a92565b60405180910390f35b34801561016357600080fd5b5061016c610518565b6040516101799190612a77565b60405180910390f35b34801561018e57600080fd5b5061019761066a565b6040516101a49190612a77565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf919061228a565b6107bc565b6040516101e49493929190612c82565b60405180910390f35b3480156101f957600080fd5b506102026108b2565b005b34801561021057600080fd5b506102196108ff565b60405161022893929190612a10565b60405180910390f35b34801561023d57600080fd5b50610246610ab5565b6040516102539190612b44565b60405180910390f35b34801561026857600080fd5b50610271610add565b60405161027e9190612943565b60405180910390f35b34801561029357600080fd5b506102ae60048036038101906102a99190612092565b610b06565b005b3480156102bc57600080fd5b506102d760048036038101906102d2919061213a565b610bb8565b005b3480156102e557600080fd5b5061030060048036038101906102fb91906122b3565b611083565b005b34801561030e57600080fd5b50610317611385565b6040516103259291906129be565b60405180910390f35b610348600480360381019061034391906120ce565b611467565b005b34801561035657600080fd5b50610371600480360381019061036c9190612238565b611700565b005b34801561037f57600080fd5b5061039a60048036038101906103959190612238565b61183c565b005b3480156103a857600080fd5b506103c360048036038101906103be919061202d565b611978565b005b808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161040192919061295e565b60206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906122ef565b106104eb578173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161049393929190612987565b602060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190612261565b506104ec565b5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016105949190612a92565b604080518083038186803b1580156105ab57600080fd5b505afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e39190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff166341e45a206040518163ffffffff1660e01b815260040160206040518083038186803b15801561062c57600080fd5b505afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106649190612261565b91505090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016106e69190612a92565b604080518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff166347bc4d926040518163ffffffff1660e01b815260040160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190612261565b91505090565b6000806000806000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b05f8e487f00000000000000000000000000000000000000000000000000000000000000008b6040518363ffffffff1660e01b8152600401610843929190612af9565b60806040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190612318565b9350935093509350838383839750975097509750505050509193509193565b6108f33373ffffffffffffffffffffffffffffffffffffffff166108d4610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b6108fd6000611a14565b565b606080600060608060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016109829190612a92565b60006040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d791906121b9565b8093508194508295505050506060835167ffffffffffffffff811180156109fd57600080fd5b50604051908082528060200260200182016040528015610a2c5781602001602082028036833780820191505090505b50905060005b8451811015610aa257848181518110610a4757fe5b6020026020010151828281518110610a5b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610a32565b5080838396509650965050505050909192565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610b619291906129e7565b602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190612261565b505050565b610bf93373ffffffffffffffffffffffffffffffffffffffff16610bda610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b600060149054906101000a900460ff16610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90612c32565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610cc39190612a92565b604080518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff166341e45a206040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5b57600080fd5b505afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d939190612261565b15610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca90612bb2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166347bc4d926040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1957600080fd5b505afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190612261565b15610e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8890612c12565b60405180910390fd5b8251845114610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90612bd2565b60405180910390fd5b60005b845181101561107c578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb868381518110610f0957fe5b6020026020010151868481518110610f1d57fe5b60200260200101516040518363ffffffff1660e01b8152600401610f429291906129e7565b602060405180830381600087803b158015610f5c57600080fd5b505af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612261565b610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca90612bf2565b60405180910390fd5b61106f6040518060400160405280600c81526020017f5472616e7366657272656420000000000000000000000000000000000000000081525085838151811061101857fe5b60200260200101516040518060400160405280600481526020017f20746f200000000000000000000000000000000000000000000000000000000081525088858151811061106257fe5b6020026020010151611ad8565b8080600101915050610ed8565b5050505050565b6110c43373ffffffffffffffffffffffffffffffffffffffff166110a5610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b6060600267ffffffffffffffff811180156110de57600080fd5b5060405190808252806020026020018201604052801561111857816020015b611105611cec565b8152602001906001900390816110fd5790505b50905060008160008151811061112a57fe5b602002602001015160000190600281111561114157fe5b9081600281111561114e57fe5b815250507f00000000000000000000000000000000000000000000000000000000000000008160008151811061118057fe5b60200260200101516020018181525050818160008151811061119e57fe5b6020026020010151606001818152505082816000815181106111bc57fe5b60200260200101516040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060028160018151811061120957fe5b602002602001015160000190600281111561122057fe5b9081600281111561122d57fe5b815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061125f57fe5b6020026020010151602001818152505060008160018151811061127e57fe5b60200260200101516060018181525050828160018151811061129c57fe5b60200260200101516040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6c46092826040518263ffffffff1660e01b81526004016113339190612a55565b600060405180830381600087803b15801561134d57600080fd5b505af1158015611361573d6000803e3d6000fd5b505050506001600060146101000a81548160ff021916908315150217905550505050565b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016114049190612a92565b604080518083038186803b15801561141b57600080fd5b505afa15801561142f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114539190612056565b809250819350505081819350935050509091565b6060825167ffffffffffffffff8111801561148157600080fd5b506040519080825280602002602001820160405280156114b05781602001602082028036833780820191505090505b50905060005b8351811015611526578381815181106114cb57fe5b60200260200101518282815181106114df57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506114b6565b506060825160010167ffffffffffffffff8111801561154457600080fd5b506040519080825280602002602001820160405280156115735781602001602082028036833780820191505090505b5090506dfffffffffffffffffffffffca4408160008151811061159257fe5b60200260200101818152505060005b83518110156115e6578381815181106115b657fe5b60200260200101518260018301815181106115cd57fe5b60200260200101818152505080806001019150506115a1565b506000606081856040516020016115fe929190612c52565b604051602081830303815290604052905061161881611b7a565b611620611d38565b60405180608001604052808681526020018581526020018381526020016000151581525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b95cac287f00000000000000000000000000000000000000000000000000000000000000003030856040518563ffffffff1660e01b81526004016116c59493929190612aad565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b5050505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161177b9190612a92565b604080518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca9190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff1663de3d2b2d836040518263ffffffff1660e01b81526004016118069190612a77565b600060405180830381600087803b15801561182057600080fd5b505af1158015611834573d6000803e3d6000fd5b505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016118b79190612a92565b604080518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff1663e01af92c836040518263ffffffff1660e01b81526004016119429190612a77565b600060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b505050505050565b6119b93373ffffffffffffffffffffffffffffffffffffffff1661199a610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b6119f5600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101ab611a01565b6119fe81611a14565b50565b81611a1057611a0f81611c13565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611b7484848484604051602401611af29493929190612b5f565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c26565b50505050565b611c1081604051602401611b8e9190612b22565b6040516020818303038152906040527f0be77f56000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c26565b50565b611c23816242414c60e81b611c40565b50565b611c3d81611c35611cc0611ce1565b63ffffffff16565b50565b60008160e81c62ffffff1690506030600a840601600a840493506030600a850601600a850494506030600a8606018360081b60230160181b8160101b8360081b850101810160c81b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024528060445260646000fd5b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611d62819050919050565b604051806080016040528060006002811115611d0457fe5b815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180608001604052806060815260200160608152602001606081526020016000151581525090565bfe5b600081359050611d7381613058565b92915050565b600081519050611d8881613058565b92915050565b600082601f830112611d9f57600080fd5b8135611db2611dad82612cf4565b612cc7565b91508181835260208401935060208101905083856020840282011115611dd757600080fd5b60005b83811015611e075781611ded8882611d64565b845260208401935060208301925050600181019050611dda565b5050505092915050565b600082601f830112611e2257600080fd5b8151611e35611e3082612d1c565b612cc7565b91508181835260208401935060208101905083856020840282011115611e5a57600080fd5b60005b83811015611e8a5781611e708882611fd9565b845260208401935060208301925050600181019050611e5d565b5050505092915050565b600082601f830112611ea557600080fd5b8135611eb8611eb382612d44565b612cc7565b91508181835260208401935060208101905083856020840282011115611edd57600080fd5b60005b83811015611f0d5781611ef38882612003565b845260208401935060208301925050600181019050611ee0565b5050505092915050565b600082601f830112611f2857600080fd5b8151611f3b611f3682612d44565b612cc7565b91508181835260208401935060208101905083856020840282011115611f6057600080fd5b60005b83811015611f905781611f768882612018565b845260208401935060208301925050600181019050611f63565b5050505092915050565b600081359050611fa98161306f565b92915050565b600081519050611fbe8161306f565b92915050565b600081359050611fd381613086565b92915050565b600081519050611fe881613086565b92915050565b600081519050611ffd8161309d565b92915050565b600081359050612012816130ad565b92915050565b600081519050612027816130ad565b92915050565b60006020828403121561203f57600080fd5b600061204d84828501611d64565b91505092915050565b6000806040838503121561206957600080fd5b600061207785828601611d79565b925050602061208885828601611fee565b9150509250929050565b600080604083850312156120a557600080fd5b60006120b385828601611d64565b92505060206120c485828601612003565b9150509250929050565b600080604083850312156120e157600080fd5b600083013567ffffffffffffffff8111156120fb57600080fd5b61210785828601611d8e565b925050602083013567ffffffffffffffff81111561212457600080fd5b61213085828601611e94565b9150509250929050565b60008060006060848603121561214f57600080fd5b600084013567ffffffffffffffff81111561216957600080fd5b61217586828701611d8e565b935050602084013567ffffffffffffffff81111561219257600080fd5b61219e86828701611e94565b92505060406121af86828701611fc4565b9150509250925092565b6000806000606084860312156121ce57600080fd5b600084015167ffffffffffffffff8111156121e857600080fd5b6121f486828701611e11565b935050602084015167ffffffffffffffff81111561221157600080fd5b61221d86828701611f17565b925050604061222e86828701612018565b9150509250925092565b60006020828403121561224a57600080fd5b600061225884828501611f9a565b91505092915050565b60006020828403121561227357600080fd5b600061228184828501611faf565b91505092915050565b60006020828403121561229c57600080fd5b60006122aa84828501611fc4565b91505092915050565b600080604083850312156122c657600080fd5b60006122d485828601611fc4565b92505060206122e585828601612003565b9150509250929050565b60006020828403121561230157600080fd5b600061230f84828501612018565b91505092915050565b6000806000806080858703121561232e57600080fd5b600061233c87828801612018565b945050602061234d87828801612018565b935050604061235e87828801612018565b925050606061236f87828801611d79565b91505092959194509250565b600061238783836123ea565b60208301905092915050565b600061239f838361268c565b60208301905092915050565b60006123b783836128d0565b60808301905092915050565b60006123cf8383612925565b60208301905092915050565b6123e481612f34565b82525050565b6123f381612eaa565b82525050565b61240281612eaa565b82525050565b600061241382612dac565b61241d8185612e33565b935061242883612d6c565b8060005b83811015612459578151612440888261237b565b975061244b83612dee565b92505060018101905061242c565b5085935050505092915050565b600061247182612db7565b61247b8185612e22565b935061248683612d7c565b8060005b838110156124b757815161249e8882612393565b97506124a983612dfb565b92505060018101905061248a565b5085935050505092915050565b60006124cf82612dc2565b6124d98185612e44565b93506124e483612d8c565b8060005b838110156125155781516124fc88826123ab565b975061250783612e08565b9250506001810190506124e8565b5085935050505092915050565b600061252d82612dcd565b6125378185612e55565b935061254283612d9c565b8060005b8381101561257357815161255a88826123c3565b975061256583612e15565b925050600181019050612546565b5085935050505092915050565b600061258b82612dcd565b6125958185612e66565b93506125a083612d9c565b8060005b838110156125d15781516125b888826123c3565b97506125c383612e15565b9250506001810190506125a4565b5085935050505092915050565b6125e781612ebc565b82525050565b6125f681612ebc565b82525050565b61260581612ec8565b82525050565b61261481612ec8565b82525050565b600061262582612dd8565b61262f8185612e77565b935061263f818560208601612ffa565b6126488161302d565b840191505092915050565b600061265e82612dd8565b6126688185612e88565b9350612678818560208601612ffa565b6126818161302d565b840191505092915050565b61269581612f46565b82525050565b6126a481612f6a565b82525050565b6126b381612f6a565b82525050565b6126c281612f8e565b82525050565b6126d181612fb2565b82525050565b6126e081612fc4565b82525050565b60006126f182612de3565b6126fb8185612e99565b935061270b818560208601612ffa565b6127148161302d565b840191505092915050565b600061272c601483612e99565b91507f4a6f696e2f4578697420697320656e61626c65640000000000000000000000006000830152602082019050919050565b600061276c601583612e99565b91507f4172726179206c656e677468206d69736d6174636800000000000000000000006000830152602082019050919050565b60006127ac600f83612e99565b91507f5472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b60006127ec600c83612e99565b91507f5377617020656e61626c656400000000000000000000000000000000000000006000830152602082019050919050565b600061282c601883612e99565b91507f737461626c65207769746864726177206e6f7420646f6e6500000000000000006000830152602082019050919050565b6000608083016000830151848203600086015261287c8282612466565b915050602083015184820360208601526128968282612522565b915050604083015184820360408601526128b0828261261a565b91505060608301516128c560608601826125de565b508091505092915050565b6080820160008201516128e660008501826126c8565b5060208201516128f960208501826125fc565b50604082015161290c604085018261269b565b50606082015161291f6060850182612925565b50505050565b61292e81612f2a565b82525050565b61293d81612f2a565b82525050565b600060208201905061295860008301846123f9565b92915050565b600060408201905061297360008301856123db565b61298060208301846123f9565b9392505050565b600060608201905061299c60008301866123db565b6129a960208301856123f9565b6129b66040830184612934565b949350505050565b60006040820190506129d360008301856123f9565b6129e060208301846126d7565b9392505050565b60006040820190506129fc60008301856123f9565b612a096020830184612934565b9392505050565b60006060820190508181036000830152612a2a8186612408565b90508181036020830152612a3e8185612580565b9050612a4d6040830184612934565b949350505050565b60006020820190508181036000830152612a6f81846124c4565b905092915050565b6000602082019050612a8c60008301846125ed565b92915050565b6000602082019050612aa7600083018461260b565b92915050565b6000608082019050612ac2600083018761260b565b612acf60208301866123f9565b612adc60408301856123f9565b8181036060830152612aee818461285f565b905095945050505050565b6000604082019050612b0e600083018561260b565b612b1b60208301846126aa565b9392505050565b60006020820190508181036000830152612b3c8184612653565b905092915050565b6000602082019050612b5960008301846126b9565b92915050565b60006080820190508181036000830152612b7981876126e6565b9050612b886020830186612934565b8181036040830152612b9a81856126e6565b9050612ba960608301846123f9565b95945050505050565b60006020820190508181036000830152612bcb8161271f565b9050919050565b60006020820190508181036000830152612beb8161275f565b9050919050565b60006020820190508181036000830152612c0b8161279f565b9050919050565b60006020820190508181036000830152612c2b816127df565b9050919050565b60006020820190508181036000830152612c4b8161281f565b9050919050565b6000604082019050612c676000830185612934565b8181036020830152612c798184612580565b90509392505050565b6000608082019050612c976000830187612934565b612ca46020830186612934565b612cb16040830185612934565b612cbe60608301846123f9565b95945050505050565b6000604051905081810181811067ffffffffffffffff82111715612cea57600080fd5b8060405250919050565b600067ffffffffffffffff821115612d0b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d3357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d5b57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612eb582612f0a565b9050919050565b60008115159050919050565b6000819050919050565b6000612edd82612eaa565b9050919050565b6000819050612ef28261303e565b919050565b6000819050612f058261304b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f3f82612fd6565b9050919050565b6000612f5182612f58565b9050919050565b6000612f6382612f0a565b9050919050565b6000612f7582612f7c565b9050919050565b6000612f8782612f0a565b9050919050565b6000612f9982612fa0565b9050919050565b6000612fab82612f0a565b9050919050565b6000612fbd82612ee4565b9050919050565b6000612fcf82612ef7565b9050919050565b6000612fe182612fe8565b9050919050565b6000612ff382612f0a565b9050919050565b60005b83811015613018578082015181840152602081019050612ffd565b83811115613027576000848401525b50505050565b6000601f19601f8301169050919050565b6003811061304857fe5b50565b6003811061305557fe5b50565b61306181612eaa565b811461306c57600080fd5b50565b61307881612ebc565b811461308357600080fd5b50565b61308f81612ed2565b811461309a57600080fd5b50565b600381106130aa57600080fd5b50565b6130b681612f2a565b81146130c157600080fd5b5056fea2646970667358221220bca6feed2b78bf16061f08738b2d70dc01f197cff51b1e9b450abfc82e81a97064736f6c63430007010033436f6e74726f6c6c6572466163746f72792063726561746528292031203a4e616d652c20204d616e61676564506f6f6c466163746f7279436f6e74726f6c6c6572466163746f72792063726561746528293a20436f6e74726f6c6c65722063726561746564436f6e74726f6c6c6572466163746f72792063726561746528293a204d616e6167656420506f6f6c2063726561746564436f6e74726f6c6c6572466163746f727920637265617465282920726571756972652021697344697361626c656420a264697066735822122024a38419286da4b7e85506cd0768fa40afbd968a257ca3460468138dc132f4e164736f6c63430007010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c80636c57f5a9116200006f5780636c57f5a91462000157578063715018a614620001795780638da5cb5b1462000185578063d4f25a4b14620001a7578063f2fde38b14620001c957620000ac565b806303818c1114620000b15780630b688a4914620000d1578063158274a514620001075780632f2770db14620001295780635ed312821462000135575b600080fd5b620000cf6004803603810190620000c991906200160f565b620001e9565b005b620000ef6004803603810190620000e991906200155f565b62000a45565b604051620000fe919062001d5f565b60405180910390f35b6200011162000a65565b60405162000120919062001d99565b60405180910390f35b6200013362000a89565b005b6200013f62000b17565b6040516200014e919062001d25565b60405180910390f35b6200016162000b41565b60405162000170919062001d5f565b60405180910390f35b6200018362000b54565b005b6200018f62000ba7565b6040516200019e919062001d25565b60405180910390f35b620001b162000bd0565b604051620001c0919062001d25565b60405180910390f35b620001e76004803603810190620001e191906200155f565b62000bf4565b005b600260009054906101000a900460ff16156200023c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002339062001f1e565b60405180910390fd5b620002706040518060600160405280602f815260200162005af2602f9139600260009054906101000a900460ff1662000c85565b620002ba60405180606001604052806037815260200162005a5d6037913982600001517f000000000000000000000000000000000000000000000000000000000000000062000d25565b6200039c6040518060400160405280601481526020017f21494d616e61676564506f6f6c466163746f72790000000000000000000000008152507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636c57f5a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200035b57600080fd5b505afa15801562000370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003969190620015b7565b62000c85565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636c57f5a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040357600080fd5b505afa15801562000418573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043e9190620015b7565b1562000481576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004789062001efc565b60405180910390fd5b600060035460001b9050600360008154809291906001019190505550606060405180602001620004b19062001199565b6020820181038252601f19601f820116604052507f00000000000000000000000000000000000000000000000000000000000000006000604051602001620004fb92919062001db6565b6040516020818303038152906040526040516020016200051d92919062001cfd565b604051602081830303815290604052905060006200054383838051906020012062000dc8565b9050606084604001515167ffffffffffffffff811180156200056457600080fd5b50604051908082528060200260200182016040528015620005945781602001602082028036833780820191505090505b50905060005b8151811015620005fa5782828281518110620005b257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506200059a565b5062000605620011a7565b856000015181600001819052508560200151816020018190525081816040018190525062000632620011c8565b866040015181600001819052508660600151816020018190525086608001518160400181815250508660a0015181606001901515908115158152505060008160800190151590811515815250508660c001518160a00181815250508660e001518160c0018181525050600060035460001b905060036000815480929190600101919050555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637304b8b9858589866040518563ffffffff1660e01b81526004016200071a949392919062001f62565b602060405180830381600087803b1580156200073557600080fd5b505af11580156200074a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200077091906200158b565b905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620007fa60405180606001604052806030815260200162005ac260309139600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000ddf565b60006200080a60008a8a62000e7f565b90508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146200087d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008749062001eda565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620008f96040518060600160405280602e815260200162005a94602e91398262000ddf565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000934919062001d42565b600060405180830381600087803b1580156200094f57600080fd5b505af115801562000964573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167fe28c6fbc4eea571ad9b63caadffab5ed31c5fe070869482612284e482b1c94ba8373ffffffffffffffffffffffffffffffffffffffff166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015620009e757600080fd5b505afa158015620009fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a229190620015e3565b60405162000a31919062001d7c565b60405180910390a250505050505050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b62000ace3373ffffffffffffffffffffffffffffffffffffffff1662000aae62000ba7565b73ffffffffffffffffffffffffffffffffffffffff16146101aa62000f99565b6001600260006101000a81548160ff0219169083151502179055507ff5d010c63fd4b7b423d9e3300f87bcd6131e94d44e9a585a74770b23213a8e0160405160405180910390a1565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b62000b993373ffffffffffffffffffffffffffffffffffffffff1662000b7962000ba7565b73ffffffffffffffffffffffffffffffffffffffff16146101aa62000f99565b62000ba5600062000faf565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b62000c393373ffffffffffffffffffffffffffffffffffffffff1662000c1962000ba7565b73ffffffffffffffffffffffffffffffffffffffff16146101aa62000f99565b62000c77600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101ab62000f99565b62000c828162000faf565b50565b62000d21828260405160240162000c9e92919062001e17565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001073565b5050565b62000dc383838360405160240162000d409392919062001e4b565b6040516020818303038152906040527f95ed0195000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001073565b505050565b600062000dd783833062001091565b905092915050565b62000e7b828260405160240162000df892919062001de3565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505062001073565b5050565b6000808447101562000ec8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ebf9062001e96565b60405180910390fd5b60008351141562000f10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f079062001f40565b60405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000f8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f859062001eb8565b60405180910390fd5b809150509392505050565b8162000fab5762000faa81620010d7565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200108e8162001086620010ec6200110d565b63ffffffff16565b50565b60008060ff60f81b838686604051602001620010b1949392919062001ca7565b6040516020818303038152906040528051906020012090508060001c9150509392505050565b620010e9816242414c60e81b62001119565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b62001209819050919050565b60008160e81c62ffffff1690506030600a840601600a840493506030600a850601600a850494506030600a8606018360081b60230160181b8160101b8360081b850101810160c81b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024528060445260646000fd5b6136b380620023aa83390190565b60405180606001604052806060815260200160608152602001606081525090565b6040518060e0016040528060608152602001606081526020016000815260200160001515815260200160001515815260200160008152602001600081525090565bfe5b6000813590506200121c8162002327565b92915050565b600081519050620012338162002327565b92915050565b600082601f8301126200124b57600080fd5b8135620012626200125c8262001feb565b62001fbd565b915081818352602084019350602081019050838560208402820111156200128857600080fd5b60005b83811015620012bc5781620012a1888262001398565b8452602084019350602083019250506001810190506200128b565b5050505092915050565b600082601f830112620012d857600080fd5b8135620012ef620012e98262002014565b62001fbd565b915081818352602084019350602081019050838560208402820111156200131557600080fd5b60005b838110156200134957816200132e888262001548565b84526020840193506020830192505060018101905062001318565b5050505092915050565b600081359050620013648162002341565b92915050565b6000815190506200137b8162002341565b92915050565b60008151905062001392816200235b565b92915050565b600081359050620013a98162002375565b92915050565b600082601f830112620013c157600080fd5b8135620013d8620013d2826200203d565b62001fbd565b91508082526020830160208301858383011115620013f557600080fd5b6200140283828462002288565b50505092915050565b600061010082840312156200141f57600080fd5b6200142c61010062001fbd565b9050600082013567ffffffffffffffff8111156200144957600080fd5b6200145784828501620013af565b600083015250602082013567ffffffffffffffff8111156200147857600080fd5b6200148684828501620013af565b602083015250604082013567ffffffffffffffff811115620014a757600080fd5b620014b58482850162001239565b604083015250606082013567ffffffffffffffff811115620014d657600080fd5b620014e484828501620012c6565b6060830152506080620014fa8482850162001548565b60808301525060a0620015108482850162001353565b60a08301525060c0620015268482850162001548565b60c08301525060e06200153c8482850162001548565b60e08301525092915050565b60008135905062001559816200238f565b92915050565b6000602082840312156200157257600080fd5b600062001582848285016200120b565b91505092915050565b6000602082840312156200159e57600080fd5b6000620015ae8482850162001222565b91505092915050565b600060208284031215620015ca57600080fd5b6000620015da848285016200136a565b91505092915050565b600060208284031215620015f657600080fd5b6000620016068482850162001381565b91505092915050565b6000602082840312156200162257600080fd5b600082013567ffffffffffffffff8111156200163d57600080fd5b6200164b848285016200140b565b91505092915050565b6000620016628383620016b3565b60208301905092915050565b60006200167c8383620018ce565b60208301905092915050565b600062001696838362001c96565b60208301905092915050565b620016ad81620021e8565b82525050565b620016be8162002147565b82525050565b620016cf8162002147565b82525050565b620016ea620016e48262002147565b620022cd565b82525050565b6000620016fd826200209a565b620017098185620020f8565b935062001716836200206a565b8060005b838110156200174d57815162001731888262001654565b97506200173e83620020d1565b9250506001810190506200171a565b5085935050505092915050565b60006200176782620020a5565b620017738185620020f8565b935062001780836200207a565b8060005b83811015620017b75781516200179b88826200166e565b9750620017a883620020de565b92505060018101905062001784565b5085935050505092915050565b6000620017d182620020b0565b620017dd818562002109565b9350620017ea836200208a565b8060005b838110156200182157815162001805888262001688565b97506200181283620020eb565b925050600181019050620017ee565b5085935050505092915050565b62001839816200215b565b82525050565b6200184a816200215b565b82525050565b620018656200185f8262002167565b620022e1565b82525050565b620018768162002193565b82525050565b620018916200188b8262002193565b620022eb565b82525050565b6000620018a482620020bb565b620018b081856200211a565b9350620018c281856020860162002297565b80840191505092915050565b620018d981620021fc565b82525050565b620018ea8162002224565b82525050565b620018fb816200224c565b82525050565b60006200190e82620020c6565b6200191a818562002125565b93506200192c81856020860162002297565b620019378162002309565b840191505092915050565b60006200194f82620020c6565b6200195b818562002136565b93506200196d81856020860162002297565b620019788162002309565b840191505092915050565b600062001992601c8362002136565b91507f435245415445325f494e53554646494349454e545f42414c414e4345000000006000830152602082019050919050565b6000620019d460158362002136565b91507f435245415445325f4445504c4f595f4641494c454400000000000000000000006000830152602082019050919050565b600062001a16602e8362002136565b91507f436f6e74726f6c6c6572466163746f72793a20436f6e74726f6c6c657220616460008301527f6472657373206d69736d617463680000000000000000000000000000000000006020830152604082019050919050565b600062001a7e603a8362002136565b91507f436f6e74726f6c6c6572466163746f72792063726561746528293a204d616e6160008301527f676564506f6f6c466163746f72792069732064697361626c65640000000000006020830152604082019050919050565b600062001ae660268362002136565b91507f436f6e74726f6c6c6572466163746f72793a20466163746f727920697320646960008301527f7361626c656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600062001b4e60158362002136565b91507f435245415445325f42595445434f44455f5a45524f00000000000000000000006000830152602082019050919050565b6000606083016000830151848203600086015262001ba0828262001901565b9150506020830151848203602086015262001bbc828262001901565b9150506040830151848203604086015262001bd88282620016f0565b9150508091505092915050565b600060e083016000830151848203600086015262001c0482826200175a565b9150506020830151848203602086015262001c208282620017c4565b915050604083015162001c37604086018262001c96565b50606083015162001c4c60608601826200182e565b50608083015162001c6160808601826200182e565b5060a083015162001c7660a086018262001c96565b5060c083015162001c8b60c086018262001c96565b508091505092915050565b62001ca181620021d1565b82525050565b600062001cb5828762001850565b60018201915062001cc78286620016d5565b60148201915062001cd982856200187c565b60208201915062001ceb82846200187c565b60208201915081905095945050505050565b600062001d0b828562001897565b915062001d19828462001897565b91508190509392505050565b600060208201905062001d3c6000830184620016c4565b92915050565b600060208201905062001d596000830184620016a2565b92915050565b600060208201905062001d7660008301846200183f565b92915050565b600060208201905062001d9360008301846200186b565b92915050565b600060208201905062001db06000830184620018df565b92915050565b600060408201905062001dcd6000830185620018df565b62001ddc6020830184620018f0565b9392505050565b6000604082019050818103600083015262001dff818562001942565b905062001e106020830184620016c4565b9392505050565b6000604082019050818103600083015262001e33818562001942565b905062001e4460208301846200183f565b9392505050565b6000606082019050818103600083015262001e67818662001942565b9050818103602083015262001e7d818562001942565b905062001e8e6040830184620016c4565b949350505050565b6000602082019050818103600083015262001eb18162001983565b9050919050565b6000602082019050818103600083015262001ed381620019c5565b9050919050565b6000602082019050818103600083015262001ef58162001a07565b9050919050565b6000602082019050818103600083015262001f178162001a6f565b9050919050565b6000602082019050818103600083015262001f398162001ad7565b9050919050565b6000602082019050818103600083015262001f5b8162001b3f565b9050919050565b6000608082019050818103600083015262001f7e818762001b81565b9050818103602083015262001f94818662001be5565b905062001fa56040830185620016c4565b62001fb460608301846200186b565b95945050505050565b6000604051905081810181811067ffffffffffffffff8211171562001fe157600080fd5b8060405250919050565b600067ffffffffffffffff8211156200200357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200202c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200205557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200215482620021b1565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6000620021aa8262002147565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000620021f58262002260565b9050919050565b6000620022098262002210565b9050919050565b60006200221d82620021b1565b9050919050565b6000620022318262002238565b9050919050565b60006200224582620021b1565b9050919050565b60006200225982620021db565b9050919050565b60006200226d8262002274565b9050919050565b60006200228182620021b1565b9050919050565b82818337600083830152505050565b60005b83811015620022b75780820151818401526020810190506200229a565b83811115620022c7576000848401525b50505050565b6000620022da82620022f5565b9050919050565b6000819050919050565b6000819050919050565b600062002302826200231a565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b620023328162002147565b81146200233e57600080fd5b50565b6200234c816200215b565b81146200235857600080fd5b50565b620023668162002193565b81146200237257600080fd5b50565b62002380816200219d565b81146200238c57600080fd5b50565b6200239a81620021d1565b8114620023a657600080fd5b5056fe60c060405260008060146101000a81548160ff0219169083151502179055503480156200002b57600080fd5b50604051620036b3380380620036b3833981810160405281019062000051919062000404565b62000062336200024b60201b60201c565b6000801b81141562000174573373ffffffffffffffffffffffffffffffffffffffff16635ed312826040518163ffffffff1660e01b815260040160206040518083038186803b158015620000b557600080fd5b505afa158015620000ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f091906200036b565b73ffffffffffffffffffffffffffffffffffffffff166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013657600080fd5b505afa1580156200014b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001719190620003d8565b90505b8173ffffffffffffffffffffffffffffffffffffffff1663f6c00927826040518263ffffffff1660e01b8152600401620001af919062000456565b604080518083038186803b158015620001c757600080fd5b505afa158015620001dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000202919062000397565b50508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060a08181525050505062000524565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200032081620004c5565b92915050565b6000815190506200033781620004df565b92915050565b6000815190506200034e81620004f9565b92915050565b600081519050620003658162000513565b92915050565b6000602082840312156200037e57600080fd5b60006200038e848285016200030f565b91505092915050565b60008060408385031215620003ab57600080fd5b6000620003bb858286016200030f565b9250506020620003ce8582860162000354565b9150509250929050565b600060208284031215620003eb57600080fd5b6000620003fb8482850162000326565b91505092915050565b600080604083850312156200041857600080fd5b600062000428858286016200033d565b92505060206200043b8582860162000326565b9150509250929050565b620004508162000487565b82525050565b60006020820190506200046d600083018462000445565b92915050565b60006200048082620004a5565b9050919050565b6000819050919050565b60006200049e8262000473565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004d08162000473565b8114620004dc57600080fd5b50565b620004ea8162000487565b8114620004f657600080fd5b50565b620005048162000491565b81146200051057600080fd5b50565b600381106200052157600080fd5b50565b60805160601c60a0516130fa620005b9600039806104f4528061055952806106ab528061080652806109475280610c885280611154528061123352806113c952806116845280611740528061187c52508061051d528061066f52806107ca528061090b5280610ab95280610b245280610c4c52806112dc528061138d52806116485280611704528061184052506130fa6000f3fe6080604052600436106100fe5760003560e01c80638da5cb5b11610095578063c399a9a411610064578063c399a9a414610302578063d95219f31461032e578063de3d2b2d1461034a578063e01af92c14610373578063f2fde38b1461039c576100fe565b80638da5cb5b1461025c578063b6d2473714610287578063bb0a64b6146102b0578063c1bf9e58146102d9576100fe565b806367e0e076116100d157806367e0e076146101ad578063715018a6146101ed57806389c06568146102045780638d928af814610231576100fe565b80631072cbea1461010357806338fff2d01461012c57806341e45a201461015757806347bc4d9214610182575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190612092565b6103c5565b005b34801561013857600080fd5b506101416104f0565b60405161014e9190612a92565b60405180910390f35b34801561016357600080fd5b5061016c610518565b6040516101799190612a77565b60405180910390f35b34801561018e57600080fd5b5061019761066a565b6040516101a49190612a77565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf919061228a565b6107bc565b6040516101e49493929190612c82565b60405180910390f35b3480156101f957600080fd5b506102026108b2565b005b34801561021057600080fd5b506102196108ff565b60405161022893929190612a10565b60405180910390f35b34801561023d57600080fd5b50610246610ab5565b6040516102539190612b44565b60405180910390f35b34801561026857600080fd5b50610271610add565b60405161027e9190612943565b60405180910390f35b34801561029357600080fd5b506102ae60048036038101906102a99190612092565b610b06565b005b3480156102bc57600080fd5b506102d760048036038101906102d2919061213a565b610bb8565b005b3480156102e557600080fd5b5061030060048036038101906102fb91906122b3565b611083565b005b34801561030e57600080fd5b50610317611385565b6040516103259291906129be565b60405180910390f35b610348600480360381019061034391906120ce565b611467565b005b34801561035657600080fd5b50610371600480360381019061036c9190612238565b611700565b005b34801561037f57600080fd5b5061039a60048036038101906103959190612238565b61183c565b005b3480156103a857600080fd5b506103c360048036038101906103be919061202d565b611978565b005b808273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161040192919061295e565b60206040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906122ef565b106104eb578173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161049393929190612987565b602060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190612261565b506104ec565b5b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016105949190612a92565b604080518083038186803b1580156105ab57600080fd5b505afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e39190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff166341e45a206040518163ffffffff1660e01b815260040160206040518083038186803b15801561062c57600080fd5b505afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106649190612261565b91505090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016106e69190612a92565b604080518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff166347bc4d926040518163ffffffff1660e01b815260040160206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190612261565b91505090565b6000806000806000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b05f8e487f00000000000000000000000000000000000000000000000000000000000000008b6040518363ffffffff1660e01b8152600401610843929190612af9565b60806040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190612318565b9350935093509350838383839750975097509750505050509193509193565b6108f33373ffffffffffffffffffffffffffffffffffffffff166108d4610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b6108fd6000611a14565b565b606080600060608060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016109829190612a92565b60006040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109d791906121b9565b8093508194508295505050506060835167ffffffffffffffff811180156109fd57600080fd5b50604051908082528060200260200182016040528015610a2c5781602001602082028036833780820191505090505b50905060005b8451811015610aa257848181518110610a4757fe5b6020026020010151828281518110610a5b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610a32565b5080838396509650965050505050909192565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610b619291906129e7565b602060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb39190612261565b505050565b610bf93373ffffffffffffffffffffffffffffffffffffffff16610bda610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b600060149054906101000a900460ff16610c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3f90612c32565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610cc39190612a92565b604080518083038186803b158015610cda57600080fd5b505afa158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff166341e45a206040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5b57600080fd5b505afa158015610d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d939190612261565b15610dd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dca90612bb2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166347bc4d926040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1957600080fd5b505afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190612261565b15610e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8890612c12565b60405180910390fd5b8251845114610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90612bd2565b60405180910390fd5b60005b845181101561107c578273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb868381518110610f0957fe5b6020026020010151868481518110610f1d57fe5b60200260200101516040518363ffffffff1660e01b8152600401610f429291906129e7565b602060405180830381600087803b158015610f5c57600080fd5b505af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612261565b610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca90612bf2565b60405180910390fd5b61106f6040518060400160405280600c81526020017f5472616e7366657272656420000000000000000000000000000000000000000081525085838151811061101857fe5b60200260200101516040518060400160405280600481526020017f20746f200000000000000000000000000000000000000000000000000000000081525088858151811061106257fe5b6020026020010151611ad8565b8080600101915050610ed8565b5050505050565b6110c43373ffffffffffffffffffffffffffffffffffffffff166110a5610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b6060600267ffffffffffffffff811180156110de57600080fd5b5060405190808252806020026020018201604052801561111857816020015b611105611cec565b8152602001906001900390816110fd5790505b50905060008160008151811061112a57fe5b602002602001015160000190600281111561114157fe5b9081600281111561114e57fe5b815250507f00000000000000000000000000000000000000000000000000000000000000008160008151811061118057fe5b60200260200101516020018181525050818160008151811061119e57fe5b6020026020010151606001818152505082816000815181106111bc57fe5b60200260200101516040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060028160018151811061120957fe5b602002602001015160000190600281111561122057fe5b9081600281111561122d57fe5b815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061125f57fe5b6020026020010151602001818152505060008160018151811061127e57fe5b60200260200101516060018181525050828160018151811061129c57fe5b60200260200101516040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6c46092826040518263ffffffff1660e01b81526004016113339190612a55565b600060405180830381600087803b15801561134d57600080fd5b505af1158015611361573d6000803e3d6000fd5b505050506001600060146101000a81548160ff021916908315150217905550505050565b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016114049190612a92565b604080518083038186803b15801561141b57600080fd5b505afa15801561142f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114539190612056565b809250819350505081819350935050509091565b6060825167ffffffffffffffff8111801561148157600080fd5b506040519080825280602002602001820160405280156114b05781602001602082028036833780820191505090505b50905060005b8351811015611526578381815181106114cb57fe5b60200260200101518282815181106114df57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506114b6565b506060825160010167ffffffffffffffff8111801561154457600080fd5b506040519080825280602002602001820160405280156115735781602001602082028036833780820191505090505b5090506dfffffffffffffffffffffffca4408160008151811061159257fe5b60200260200101818152505060005b83518110156115e6578381815181106115b657fe5b60200260200101518260018301815181106115cd57fe5b60200260200101818152505080806001019150506115a1565b506000606081856040516020016115fe929190612c52565b604051602081830303815290604052905061161881611b7a565b611620611d38565b60405180608001604052808681526020018581526020018381526020016000151581525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b95cac287f00000000000000000000000000000000000000000000000000000000000000003030856040518563ffffffff1660e01b81526004016116c59493929190612aad565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b5050505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161177b9190612a92565b604080518083038186803b15801561179257600080fd5b505afa1580156117a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ca9190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff1663de3d2b2d836040518263ffffffff1660e01b81526004016118069190612a77565b600060405180830381600087803b15801561182057600080fd5b505af1158015611834573d6000803e3d6000fd5b505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f6c009277f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016118b79190612a92565b604080518083038186803b1580156118ce57600080fd5b505afa1580156118e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119069190612056565b5090508073ffffffffffffffffffffffffffffffffffffffff1663e01af92c836040518263ffffffff1660e01b81526004016119429190612a77565b600060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b505050505050565b6119b93373ffffffffffffffffffffffffffffffffffffffff1661199a610add565b73ffffffffffffffffffffffffffffffffffffffff16146101aa611a01565b6119f5600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156101ab611a01565b6119fe81611a14565b50565b81611a1057611a0f81611c13565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611b7484848484604051602401611af29493929190612b5f565b6040516020818303038152906040527f7c4632a4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c26565b50505050565b611c1081604051602401611b8e9190612b22565b6040516020818303038152906040527f0be77f56000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611c26565b50565b611c23816242414c60e81b611c40565b50565b611c3d81611c35611cc0611ce1565b63ffffffff16565b50565b60008160e81c62ffffff1690506030600a840601600a840493506030600a850601600a850494506030600a8606018360081b60230160181b8160101b8360081b850101810160c81b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260076024528060445260646000fd5b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611d62819050919050565b604051806080016040528060006002811115611d0457fe5b815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60405180608001604052806060815260200160608152602001606081526020016000151581525090565bfe5b600081359050611d7381613058565b92915050565b600081519050611d8881613058565b92915050565b600082601f830112611d9f57600080fd5b8135611db2611dad82612cf4565b612cc7565b91508181835260208401935060208101905083856020840282011115611dd757600080fd5b60005b83811015611e075781611ded8882611d64565b845260208401935060208301925050600181019050611dda565b5050505092915050565b600082601f830112611e2257600080fd5b8151611e35611e3082612d1c565b612cc7565b91508181835260208401935060208101905083856020840282011115611e5a57600080fd5b60005b83811015611e8a5781611e708882611fd9565b845260208401935060208301925050600181019050611e5d565b5050505092915050565b600082601f830112611ea557600080fd5b8135611eb8611eb382612d44565b612cc7565b91508181835260208401935060208101905083856020840282011115611edd57600080fd5b60005b83811015611f0d5781611ef38882612003565b845260208401935060208301925050600181019050611ee0565b5050505092915050565b600082601f830112611f2857600080fd5b8151611f3b611f3682612d44565b612cc7565b91508181835260208401935060208101905083856020840282011115611f6057600080fd5b60005b83811015611f905781611f768882612018565b845260208401935060208301925050600181019050611f63565b5050505092915050565b600081359050611fa98161306f565b92915050565b600081519050611fbe8161306f565b92915050565b600081359050611fd381613086565b92915050565b600081519050611fe881613086565b92915050565b600081519050611ffd8161309d565b92915050565b600081359050612012816130ad565b92915050565b600081519050612027816130ad565b92915050565b60006020828403121561203f57600080fd5b600061204d84828501611d64565b91505092915050565b6000806040838503121561206957600080fd5b600061207785828601611d79565b925050602061208885828601611fee565b9150509250929050565b600080604083850312156120a557600080fd5b60006120b385828601611d64565b92505060206120c485828601612003565b9150509250929050565b600080604083850312156120e157600080fd5b600083013567ffffffffffffffff8111156120fb57600080fd5b61210785828601611d8e565b925050602083013567ffffffffffffffff81111561212457600080fd5b61213085828601611e94565b9150509250929050565b60008060006060848603121561214f57600080fd5b600084013567ffffffffffffffff81111561216957600080fd5b61217586828701611d8e565b935050602084013567ffffffffffffffff81111561219257600080fd5b61219e86828701611e94565b92505060406121af86828701611fc4565b9150509250925092565b6000806000606084860312156121ce57600080fd5b600084015167ffffffffffffffff8111156121e857600080fd5b6121f486828701611e11565b935050602084015167ffffffffffffffff81111561221157600080fd5b61221d86828701611f17565b925050604061222e86828701612018565b9150509250925092565b60006020828403121561224a57600080fd5b600061225884828501611f9a565b91505092915050565b60006020828403121561227357600080fd5b600061228184828501611faf565b91505092915050565b60006020828403121561229c57600080fd5b60006122aa84828501611fc4565b91505092915050565b600080604083850312156122c657600080fd5b60006122d485828601611fc4565b92505060206122e585828601612003565b9150509250929050565b60006020828403121561230157600080fd5b600061230f84828501612018565b91505092915050565b6000806000806080858703121561232e57600080fd5b600061233c87828801612018565b945050602061234d87828801612018565b935050604061235e87828801612018565b925050606061236f87828801611d79565b91505092959194509250565b600061238783836123ea565b60208301905092915050565b600061239f838361268c565b60208301905092915050565b60006123b783836128d0565b60808301905092915050565b60006123cf8383612925565b60208301905092915050565b6123e481612f34565b82525050565b6123f381612eaa565b82525050565b61240281612eaa565b82525050565b600061241382612dac565b61241d8185612e33565b935061242883612d6c565b8060005b83811015612459578151612440888261237b565b975061244b83612dee565b92505060018101905061242c565b5085935050505092915050565b600061247182612db7565b61247b8185612e22565b935061248683612d7c565b8060005b838110156124b757815161249e8882612393565b97506124a983612dfb565b92505060018101905061248a565b5085935050505092915050565b60006124cf82612dc2565b6124d98185612e44565b93506124e483612d8c565b8060005b838110156125155781516124fc88826123ab565b975061250783612e08565b9250506001810190506124e8565b5085935050505092915050565b600061252d82612dcd565b6125378185612e55565b935061254283612d9c565b8060005b8381101561257357815161255a88826123c3565b975061256583612e15565b925050600181019050612546565b5085935050505092915050565b600061258b82612dcd565b6125958185612e66565b93506125a083612d9c565b8060005b838110156125d15781516125b888826123c3565b97506125c383612e15565b9250506001810190506125a4565b5085935050505092915050565b6125e781612ebc565b82525050565b6125f681612ebc565b82525050565b61260581612ec8565b82525050565b61261481612ec8565b82525050565b600061262582612dd8565b61262f8185612e77565b935061263f818560208601612ffa565b6126488161302d565b840191505092915050565b600061265e82612dd8565b6126688185612e88565b9350612678818560208601612ffa565b6126818161302d565b840191505092915050565b61269581612f46565b82525050565b6126a481612f6a565b82525050565b6126b381612f6a565b82525050565b6126c281612f8e565b82525050565b6126d181612fb2565b82525050565b6126e081612fc4565b82525050565b60006126f182612de3565b6126fb8185612e99565b935061270b818560208601612ffa565b6127148161302d565b840191505092915050565b600061272c601483612e99565b91507f4a6f696e2f4578697420697320656e61626c65640000000000000000000000006000830152602082019050919050565b600061276c601583612e99565b91507f4172726179206c656e677468206d69736d6174636800000000000000000000006000830152602082019050919050565b60006127ac600f83612e99565b91507f5472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b60006127ec600c83612e99565b91507f5377617020656e61626c656400000000000000000000000000000000000000006000830152602082019050919050565b600061282c601883612e99565b91507f737461626c65207769746864726177206e6f7420646f6e6500000000000000006000830152602082019050919050565b6000608083016000830151848203600086015261287c8282612466565b915050602083015184820360208601526128968282612522565b915050604083015184820360408601526128b0828261261a565b91505060608301516128c560608601826125de565b508091505092915050565b6080820160008201516128e660008501826126c8565b5060208201516128f960208501826125fc565b50604082015161290c604085018261269b565b50606082015161291f6060850182612925565b50505050565b61292e81612f2a565b82525050565b61293d81612f2a565b82525050565b600060208201905061295860008301846123f9565b92915050565b600060408201905061297360008301856123db565b61298060208301846123f9565b9392505050565b600060608201905061299c60008301866123db565b6129a960208301856123f9565b6129b66040830184612934565b949350505050565b60006040820190506129d360008301856123f9565b6129e060208301846126d7565b9392505050565b60006040820190506129fc60008301856123f9565b612a096020830184612934565b9392505050565b60006060820190508181036000830152612a2a8186612408565b90508181036020830152612a3e8185612580565b9050612a4d6040830184612934565b949350505050565b60006020820190508181036000830152612a6f81846124c4565b905092915050565b6000602082019050612a8c60008301846125ed565b92915050565b6000602082019050612aa7600083018461260b565b92915050565b6000608082019050612ac2600083018761260b565b612acf60208301866123f9565b612adc60408301856123f9565b8181036060830152612aee818461285f565b905095945050505050565b6000604082019050612b0e600083018561260b565b612b1b60208301846126aa565b9392505050565b60006020820190508181036000830152612b3c8184612653565b905092915050565b6000602082019050612b5960008301846126b9565b92915050565b60006080820190508181036000830152612b7981876126e6565b9050612b886020830186612934565b8181036040830152612b9a81856126e6565b9050612ba960608301846123f9565b95945050505050565b60006020820190508181036000830152612bcb8161271f565b9050919050565b60006020820190508181036000830152612beb8161275f565b9050919050565b60006020820190508181036000830152612c0b8161279f565b9050919050565b60006020820190508181036000830152612c2b816127df565b9050919050565b60006020820190508181036000830152612c4b8161281f565b9050919050565b6000604082019050612c676000830185612934565b8181036020830152612c798184612580565b90509392505050565b6000608082019050612c976000830187612934565b612ca46020830186612934565b612cb16040830185612934565b612cbe60608301846123f9565b95945050505050565b6000604051905081810181811067ffffffffffffffff82111715612cea57600080fd5b8060405250919050565b600067ffffffffffffffff821115612d0b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d3357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612d5b57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612eb582612f0a565b9050919050565b60008115159050919050565b6000819050919050565b6000612edd82612eaa565b9050919050565b6000819050612ef28261303e565b919050565b6000819050612f058261304b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f3f82612fd6565b9050919050565b6000612f5182612f58565b9050919050565b6000612f6382612f0a565b9050919050565b6000612f7582612f7c565b9050919050565b6000612f8782612f0a565b9050919050565b6000612f9982612fa0565b9050919050565b6000612fab82612f0a565b9050919050565b6000612fbd82612ee4565b9050919050565b6000612fcf82612ef7565b9050919050565b6000612fe182612fe8565b9050919050565b6000612ff382612f0a565b9050919050565b60005b83811015613018578082015181840152602081019050612ffd565b83811115613027576000848401525b50505050565b6000601f19601f8301169050919050565b6003811061304857fe5b50565b6003811061305557fe5b50565b61306181612eaa565b811461306c57600080fd5b50565b61307881612ebc565b811461308357600080fd5b50565b61308f81612ed2565b811461309a57600080fd5b50565b600381106130aa57600080fd5b50565b6130b681612f2a565b81146130c157600080fd5b5056fea2646970667358221220bca6feed2b78bf16061f08738b2d70dc01f197cff51b1e9b450abfc82e81a97064736f6c63430007010033436f6e74726f6c6c6572466163746f72792063726561746528292031203a4e616d652c20204d616e61676564506f6f6c466163746f7279436f6e74726f6c6c6572466163746f72792063726561746528293a20436f6e74726f6c6c65722063726561746564436f6e74726f6c6c6572466163746f72792063726561746528293a204d616e6167656420506f6f6c2063726561746564436f6e74726f6c6c6572466163746f727920637265617465282920726571756972652021697344697361626c656420a264697066735822122024a38419286da4b7e85506cd0768fa40afbd968a257ca3460468138dc132f4e164736f6c63430007010033",
  "devdoc": {
    "details": "Determines controller deployment address, deploys pool (w/ controller address as argument), then controller.",
    "kind": "dev",
    "methods": {
      "create((string,string,address[],uint256[],uint256,bool,uint256,uint256))": {
        "details": "Create a Managed Pool and a Controller."
      },
      "disable()": {
        "details": "Allow the owner to disable the factory, preventing future deployments.The onlyOwner access control paradigm is an example. Any access control can be implemented to allow for different needs."
      },
      "getLastCreatedPool()": {
        "details": "Return the address of the most recently created pool."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ControllerFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "disable()": {
        "notice": "owner is initially the factory deployer, but this role can be transferred."
      }
    },
    "notice": "Factory for a Managed Pool and Pool Controller.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1862,
        "contract": "contracts/ControllerFactory.sol:ControllerFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2647,
        "contract": "contracts/ControllerFactory.sol:ControllerFactory",
        "label": "isControllerFromFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2653,
        "contract": "contracts/ControllerFactory.sol:ControllerFactory",
        "label": "isDisabled",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2655,
        "contract": "contracts/ControllerFactory.sol:ControllerFactory",
        "label": "_nextControllerSalt",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2657,
        "contract": "contracts/ControllerFactory.sol:ControllerFactory",
        "label": "_lastCreatedPool",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}